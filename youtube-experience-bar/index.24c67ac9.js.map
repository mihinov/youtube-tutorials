{"mappings":"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","sources":["<anon>","youtube-experience-bar/scripts/index.ts","youtube-experience-bar/scripts/experience-bar.ts"],"sourcesContent":["class $3381ac0e0d5b9ce3$export$d5884bf0f43c13ae {\n    constructor(injectedNode){\n        this._grades = {\n            0: {\n                name: \"Iron\",\n                min: 0,\n                max: 60,\n                nextGradeId: 1\n            },\n            1: {\n                name: \"Platinum\",\n                min: 60,\n                max: 150,\n                nextGradeId: 2\n            },\n            2: {\n                name: \"Diamond\",\n                min: 150,\n                max: 300,\n                nextGradeId: 3\n            },\n            3: {\n                name: \"Master\",\n                min: 300,\n                max: 500,\n                nextGradeId: 4\n            },\n            4: {\n                name: \"Grandmaster\",\n                min: 500,\n                max: 800,\n                nextGradeId: 5\n            },\n            5: {\n                name: \"Challenger\",\n                min: 800,\n                max: 100000,\n                nextGradeId: null\n            }\n        };\n        this._cssClasses = {\n            balance: \"balance\",\n            balanceTotal: \"balance__total\",\n            balanceProgress: \"balance__progress\",\n            balanceGradeStart: \"balance__grade_start\",\n            balanceGradeEnd: \"balance__grade_end\"\n        };\n        this._balance = {\n            initBalance: 0,\n            addedBalance: 0,\n            totalBalance: 0\n        };\n        this._currentGradeId = -1;\n        this._initNodes(injectedNode);\n        this._calcCurrentGradeId();\n        this._renderBalance();\n    }\n    _initNodes(injectedNode) {\n        injectedNode.innerHTML = `\n\t\t\t<div class=\"balance\">\n\t\t\t\t<div class=\"balance__text\">\n\t\t\t\t\tВаш баланc:\n\t\t\t\t\t<span class=\"balance__total\">0</span>\n\t\t\t\t</div>\n\t\t\t\t<progress class=\"balance__progress\"></progress>\n\t\t\t\t<div class=\"balance__grades\">\n\t\t\t\t\t<div class=\"balance__grade balance__grade_start\">Iron</div>\n\t\t\t\t\t<div class=\"balance__grade balance__grade_end\">Platinum</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n        const balanceNode = this._querySelector(injectedNode, \".\" + this._cssClasses.balance);\n        this._nodes = {\n            balanceNode: balanceNode,\n            balanceTotalNode: this._querySelector(balanceNode, \".\" + this._cssClasses.balanceTotal),\n            balanceProgressNode: this._querySelector(balanceNode, \".\" + this._cssClasses.balanceProgress),\n            balanceGradeStartNode: this._querySelector(balanceNode, \".\" + this._cssClasses.balanceGradeStart),\n            balanceGradeEndNode: this._querySelector(balanceNode, \".\" + this._cssClasses.balanceGradeEnd)\n        };\n    }\n    _querySelector(parentNode, selector) {\n        const node = parentNode.querySelector(selector);\n        if (node === null) throw new Error(`ExperienceBar: элемент с классом ${selector} не найден`);\n        return node;\n    }\n    /**\n\t * Функция для добавления нового баланса\n\t * @param {number} newBalance - Новое значение баланса, положительное число\n\t */ addBalance(newBalance) {\n        this._balance.addedBalance = newBalance;\n        this._calcTotalBalance();\n        this._calcCurrentGradeId();\n        this._renderBalance();\n    }\n    /**\n\t * Функция для установки изначального баланса\n\t * @param {number} initBalance - Значение изначального баланса\n\t */ setInitBalance(initBalance) {\n        this._balance.initBalance = initBalance;\n        this._calcTotalBalance();\n        this._calcCurrentGradeId();\n        this._renderBalance();\n    }\n    _renderBalance() {\n        const currentGrade = this.getCurrentGrade();\n        const nextGrade = this._grades[this._currentGradeId + 1];\n        const balance = this._balance.totalBalance;\n        const max = currentGrade.max;\n        const min = currentGrade.min;\n        this._nodes.balanceProgressNode.setAttribute(\"min\", String(0));\n        this._nodes.balanceProgressNode.setAttribute(\"max\", String(max - min));\n        this._nodes.balanceProgressNode.value = balance - min;\n        this._nodes.balanceTotalNode.textContent = String(balance);\n        this._nodes.balanceGradeStartNode.textContent = currentGrade.name;\n        if (nextGrade !== undefined) this._nodes.balanceGradeEndNode.textContent = nextGrade.name;\n        else this._nodes.balanceGradeEndNode.textContent = \"∞\";\n    }\n    _calcTotalBalance() {\n        this._balance.totalBalance = this._balance.initBalance + this._balance.addedBalance;\n    }\n    _calcCurrentGradeId() {\n        const totalBalance = this._balance.totalBalance;\n        for(const idGrade in this._grades){\n            const grade = this._grades[idGrade];\n            const min = grade.min;\n            const max = grade.max;\n            if (totalBalance >= min && totalBalance < max) {\n                this._currentGradeId = Number(idGrade);\n                break;\n            }\n        }\n    }\n    getCurrentGrade() {\n        if (this._currentGradeId === -1) throw new Error(\"ExperienceBar: текущий грейд не установлен\");\n        return this._grades[this._currentGradeId];\n    }\n}\n\n\nconst $3993f2fb442a9cdc$var$inputAurumNode = document.querySelector(\".input-aurum\");\nconst $3993f2fb442a9cdc$var$injectedBarNode = document.querySelector(\".injected-bar\");\nif ($3993f2fb442a9cdc$var$injectedBarNode === null || $3993f2fb442a9cdc$var$inputAurumNode === null) throw new Error(\"Что-то не найдено\");\nconst $3993f2fb442a9cdc$var$experienceBar = new (0, $3381ac0e0d5b9ce3$export$d5884bf0f43c13ae)($3993f2fb442a9cdc$var$injectedBarNode);\n$3993f2fb442a9cdc$var$experienceBar.setInitBalance(30);\n$3993f2fb442a9cdc$var$inputAurumNode.addEventListener(\"input\", ()=>{\n    const newBalance = $3993f2fb442a9cdc$var$inputAurumNode.value;\n    if (parseFloat(newBalance) >= 0 && !isNaN(parseFloat(newBalance))) $3993f2fb442a9cdc$var$experienceBar.addBalance(parseFloat(newBalance));\n    else if (newBalance === \"\") $3993f2fb442a9cdc$var$experienceBar.addBalance(0);\n});\n\n\n//# sourceMappingURL=index.24c67ac9.js.map\n","import { ExperienceBar } from \"./experience-bar\";\n\nconst inputAurumNode: HTMLInputElement | null = document.querySelector('.input-aurum');\nconst injectedBarNode: HTMLElement | null = document.querySelector('.injected-bar');\n\nif (injectedBarNode === null || inputAurumNode === null) {\n\tthrow new Error('Что-то не найдено');\n}\n\nconst experienceBar = new ExperienceBar(injectedBarNode);\n\nexperienceBar.setInitBalance(30);\n\ninputAurumNode.addEventListener('input', () => {\n\tconst newBalance = inputAurumNode.value;\n\n\tif (parseFloat(newBalance) >= 0 && !isNaN(parseFloat(newBalance))) {\n\t\texperienceBar.addBalance(parseFloat(newBalance));\n\t} else if (newBalance === '') {\n\t\texperienceBar.addBalance(0);\n\t}\n});\n\nexport {};\n","import {\n\tExperienceBarBalance,\n\tExperienceBarCssClasses,\n\tExperienceBarGrade,\n\tExperienceBarGrades,\n\tExperienceBarNodes\n} from \"../interfacesOrTypes\";\n\nexport class ExperienceBar {\n\n\tprivate _grades: ExperienceBarGrades = {\n\t\t0: { name: 'Iron', min: 0, max: 60, nextGradeId: 1 },\n\t\t1: { name: 'Platinum', min: 60, max: 150, nextGradeId: 2 },\n\t\t2: { name: 'Diamond', min: 150, max: 300, nextGradeId: 3 },\n\t\t3: { name: 'Master', min: 300, max: 500, nextGradeId: 4 },\n\t\t4: { name: 'Grandmaster', min: 500, max: 800, nextGradeId: 5 },\n\t\t5: { name: 'Challenger', min: 800, max: 100_000, nextGradeId: null }\n\t};\n\n\tprivate _nodes: ExperienceBarNodes;\n\n\tprivate _cssClasses: ExperienceBarCssClasses = {\n\t\tbalance: 'balance',\n\t\tbalanceTotal: 'balance__total',\n\t\tbalanceProgress: 'balance__progress',\n\t\tbalanceGradeStart: 'balance__grade_start',\n\t\tbalanceGradeEnd: 'balance__grade_end'\n\t};\n\n\tprivate _balance: ExperienceBarBalance = {\n\t\tinitBalance: 0,\n\t\taddedBalance: 0,\n\t\ttotalBalance: 0\n\t};\n\n\tprivate _currentGradeId: number = -1;\n\n\tconstructor(injectedNode: Element) {\n\t\tthis._initNodes(injectedNode);\n\t\tthis._calcCurrentGradeId();\n\t\tthis._renderBalance();\n\t}\n\n\tprivate _initNodes(injectedNode: Element): void {\n\t\tinjectedNode.innerHTML = `\n\t\t\t<div class=\"balance\">\n\t\t\t\t<div class=\"balance__text\">\n\t\t\t\t\tВаш баланc:\n\t\t\t\t\t<span class=\"balance__total\">0</span>\n\t\t\t\t</div>\n\t\t\t\t<progress class=\"balance__progress\"></progress>\n\t\t\t\t<div class=\"balance__grades\">\n\t\t\t\t\t<div class=\"balance__grade balance__grade_start\">Iron</div>\n\t\t\t\t\t<div class=\"balance__grade balance__grade_end\">Platinum</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst balanceNode = this._querySelector<HTMLElement>(injectedNode, '.' +  this._cssClasses.balance);\n\n\t\tthis._nodes = {\n\t\t\tbalanceNode: balanceNode,\n\t\t\tbalanceTotalNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceTotal),\n\t\t\tbalanceProgressNode: this._querySelector<HTMLProgressElement>(balanceNode, '.' + this._cssClasses.balanceProgress),\n\t\t\tbalanceGradeStartNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceGradeStart),\n\t\t\tbalanceGradeEndNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceGradeEnd)\n\t\t}\n\n\t}\n\n\tprivate _querySelector<T = Element>(parentNode: Element | Document, selector: string): T {\n\t\tconst node = parentNode.querySelector(selector);\n\t\tif (node === null) {\n\t\t\tthrow new Error(`ExperienceBar: элемент с классом ${selector} не найден`);\n\t\t}\n\t\treturn node as T;\n\t}\n\n\t/**\n\t * Функция для добавления нового баланса\n\t * @param {number} newBalance - Новое значение баланса, положительное число\n\t */\n\tpublic addBalance(newBalance: number): void {\n\t\tthis._balance.addedBalance = newBalance;\n\t\tthis._calcTotalBalance();\n\t\tthis._calcCurrentGradeId();\n\t\tthis._renderBalance();\n\t}\n\n\t/**\n\t * Функция для установки изначального баланса\n\t * @param {number} initBalance - Значение изначального баланса\n\t */\n\tpublic setInitBalance(initBalance: number): void {\n\t\tthis._balance.initBalance = initBalance;\n\t\tthis._calcTotalBalance();\n\t\tthis._calcCurrentGradeId();\n\t\tthis._renderBalance();\n\t}\n\n\tprivate _renderBalance(): void {\n\t\tconst currentGrade = this.getCurrentGrade();\n\t\tconst nextGrade = this._grades[this._currentGradeId + 1];\n\t\tconst balance = this._balance.totalBalance;\n\t\tconst max = currentGrade.max;\n\t\tconst min = currentGrade.min;\n\n\t\tthis._nodes.balanceProgressNode.setAttribute('min', String(0));\n\t\tthis._nodes.balanceProgressNode.setAttribute('max', String(max - min));\n\t\tthis._nodes.balanceProgressNode.value = balance - min;\n\t\tthis._nodes.balanceTotalNode.textContent = String(balance);\n\t\tthis._nodes.balanceGradeStartNode.textContent = currentGrade.name;\n\n\t\tif (nextGrade !== undefined) {\n\t\t\tthis._nodes.balanceGradeEndNode.textContent = nextGrade.name;\n\t\t} else {\n\t\t\tthis._nodes.balanceGradeEndNode.textContent = '∞';\n\t\t}\n\n\t}\n\n\tprivate _calcTotalBalance(): void {\n\t\tthis._balance.totalBalance = this._balance.initBalance + this._balance.addedBalance;\n\t}\n\n\tprivate _calcCurrentGradeId(): void {\n\t\tconst totalBalance = this._balance.totalBalance;\n\n\t\tfor (const idGrade in this._grades) {\n\t\t\tconst grade = this._grades[idGrade];\n\t\t\tconst min = grade.min;\n\t\t\tconst max = grade.max;\n\n\t\t\tif (totalBalance >= min && totalBalance < max) {\n\t\t\t\tthis._currentGradeId = Number(idGrade);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic getCurrentGrade(): ExperienceBarGrade {\n\t\tif (this._currentGradeId === -1) {\n\t\t\tthrow new Error('ExperienceBar: текущий грейд не установлен');\n\t\t}\n\n\t\treturn this._grades[this._currentGradeId];\n\t}\n}\n"],"names":["$3993f2fb442a9cdc$var$inputAurumNode","document","querySelector","$3993f2fb442a9cdc$var$injectedBarNode","Error","$3993f2fb442a9cdc$var$experienceBar","constructor","injectedNode","_grades","name","min","max","nextGradeId","_cssClasses","balance","balanceTotal","balanceProgress","balanceGradeStart","balanceGradeEnd","_balance","initBalance","addedBalance","totalBalance","_currentGradeId","_initNodes","_calcCurrentGradeId","_renderBalance","innerHTML","balanceNode","_querySelector","_nodes","balanceTotalNode","balanceProgressNode","balanceGradeStartNode","balanceGradeEndNode","parentNode","selector","node","addBalance","newBalance","_calcTotalBalance","setInitBalance","currentGrade","getCurrentGrade","nextGrade","setAttribute","String","value","textContent","undefined","idGrade","grade","Number","addEventListener","parseFloat","isNaN"],"version":3,"file":"index.24c67ac9.js.map"}