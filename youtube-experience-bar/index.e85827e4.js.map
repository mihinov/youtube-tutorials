{"mappings":"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","sources":["youtube-experience-bar/scripts/index.ts","youtube-experience-bar/scripts/experience-bar.ts"],"sourcesContent":["import { ExperienceBar } from \"./experience-bar\";\n\nconst inputAurumNode: HTMLInputElement | null = document.querySelector('.input-aurum');\nconst injectedBarNode: HTMLElement | null = document.querySelector('.injected-bar');\n\nif (injectedBarNode === null || inputAurumNode === null) {\n\tthrow new Error('Что-то не найдено');\n}\n\nconst experienceBar = new ExperienceBar(injectedBarNode);\n\nexperienceBar.setInitBalance(30);\n\ninputAurumNode.addEventListener('input', () => {\n\tconst newBalance = inputAurumNode.value;\n\n\tif (parseFloat(newBalance) >= 0 && !isNaN(parseFloat(newBalance))) {\n\t\texperienceBar.addBalance(parseFloat(newBalance));\n\t} else if (newBalance === '') {\n\t\texperienceBar.addBalance(0);\n\t}\n});\n\nexport {};\n","import {\n\tExperienceBarBalance,\n\tExperienceBarCssClasses,\n\tExperienceBarGrade,\n\tExperienceBarGrades,\n\tExperienceBarNodes\n} from \"../interfacesOrTypes\";\n\nexport class ExperienceBar {\n\n\tprivate _grades: ExperienceBarGrades = {\n\t\t0: { name: 'Iron', min: 0, max: 60, nextGradeId: 1 },\n\t\t1: { name: 'Platinum', min: 60, max: 150, nextGradeId: 2 },\n\t\t2: { name: 'Diamond', min: 150, max: 300, nextGradeId: 3 },\n\t\t3: { name: 'Master', min: 300, max: 500, nextGradeId: 4 },\n\t\t4: { name: 'Grandmaster', min: 500, max: 800, nextGradeId: 5 },\n\t\t5: { name: 'Challenger', min: 800, max: 100_000, nextGradeId: null }\n\t};\n\n\tprivate _nodes: ExperienceBarNodes;\n\n\tprivate _cssClasses: ExperienceBarCssClasses = {\n\t\tbalance: 'balance',\n\t\tbalanceTotal: 'balance__total',\n\t\tbalanceProgress: 'balance__progress',\n\t\tbalanceGradeStart: 'balance__grade_start',\n\t\tbalanceGradeEnd: 'balance__grade_end'\n\t};\n\n\tprivate _balance: ExperienceBarBalance = {\n\t\tinitBalance: 0,\n\t\taddedBalance: 0,\n\t\ttotalBalance: 0\n\t};\n\n\tprivate _currentGradeId: number = -1;\n\n\tconstructor(injectedNode: Element) {\n\t\tthis._initNodes(injectedNode);\n\t\tthis._calcCurrentGradeId();\n\t\tthis._renderBalance();\n\t}\n\n\tprivate _initNodes(injectedNode: Element): void {\n\t\tinjectedNode.innerHTML = `\n\t\t\t<div class=\"balance\">\n\t\t\t\t<div class=\"balance__text\">\n\t\t\t\t\tВаш баланc:\n\t\t\t\t\t<span class=\"balance__total\">0</span>\n\t\t\t\t</div>\n\t\t\t\t<progress class=\"balance__progress\"></progress>\n\t\t\t\t<div class=\"balance__grades\">\n\t\t\t\t\t<div class=\"balance__grade balance__grade_start\">Iron</div>\n\t\t\t\t\t<div class=\"balance__grade balance__grade_end\">Platinum</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst balanceNode = this._querySelector<HTMLElement>(injectedNode, '.' +  this._cssClasses.balance);\n\n\t\tthis._nodes = {\n\t\t\tbalanceNode: balanceNode,\n\t\t\tbalanceTotalNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceTotal),\n\t\t\tbalanceProgressNode: this._querySelector<HTMLProgressElement>(balanceNode, '.' + this._cssClasses.balanceProgress),\n\t\t\tbalanceGradeStartNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceGradeStart),\n\t\t\tbalanceGradeEndNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceGradeEnd)\n\t\t}\n\n\t}\n\n\tprivate _querySelector<T = Element>(parentNode: Element | Document, selector: string): T {\n\t\tconst node = parentNode.querySelector(selector);\n\t\tif (node === null) {\n\t\t\tthrow new Error(`ExperienceBar: элемент с классом ${selector} не найден`);\n\t\t}\n\t\treturn node as T;\n\t}\n\n\t/**\n\t * Функция для добавления нового баланса\n\t * @param {number} newBalance - Новое значение баланса, положительное число\n\t */\n\tpublic addBalance(newBalance: number): void {\n\t\tthis._balance.addedBalance = newBalance;\n\t\tthis._calcTotalBalance();\n\t\tthis._calcCurrentGradeId();\n\t\tthis._renderBalance();\n\t}\n\n\t/**\n\t * Функция для установки изначального баланса\n\t * @param {number} initBalance - Значение изначального баланса\n\t */\n\tpublic setInitBalance(initBalance: number): void {\n\t\tthis._balance.initBalance = initBalance;\n\t\tthis._calcTotalBalance();\n\t\tthis._calcCurrentGradeId();\n\t\tthis._renderBalance();\n\t}\n\n\tprivate _renderBalance(): void {\n\t\tconst currentGrade = this.getCurrentGrade();\n\t\tconst nextGrade = this._grades[this._currentGradeId + 1];\n\t\tconst balance = this._balance.totalBalance;\n\t\tconst max = currentGrade.max;\n\t\tconst min = currentGrade.min;\n\n\t\tthis._nodes.balanceProgressNode.setAttribute('min', String(0));\n\t\tthis._nodes.balanceProgressNode.setAttribute('max', String(max - min));\n\t\tthis._nodes.balanceProgressNode.value = balance - min;\n\t\tthis._nodes.balanceTotalNode.textContent = String(balance);\n\t\tthis._nodes.balanceGradeStartNode.textContent = currentGrade.name;\n\n\t\tif (nextGrade !== undefined) {\n\t\t\tthis._nodes.balanceGradeEndNode.textContent = nextGrade.name;\n\t\t} else {\n\t\t\tthis._nodes.balanceGradeEndNode.textContent = '∞';\n\t\t}\n\n\t}\n\n\tprivate _calcTotalBalance(): void {\n\t\tthis._balance.totalBalance = this._balance.initBalance + this._balance.addedBalance;\n\t}\n\n\tprivate _calcCurrentGradeId(): void {\n\t\tconst totalBalance = this._balance.totalBalance;\n\n\t\tfor (const idGrade in this._grades) {\n\t\t\tconst grade = this._grades[idGrade];\n\t\t\tconst min = grade.min;\n\t\t\tconst max = grade.max;\n\n\t\t\tif (totalBalance >= min && totalBalance < max) {\n\t\t\t\tthis._currentGradeId = Number(idGrade);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic getCurrentGrade(): ExperienceBarGrade {\n\t\tif (this._currentGradeId === -1) {\n\t\t\tthrow new Error('ExperienceBar: текущий грейд не установлен');\n\t\t}\n\n\t\treturn this._grades[this._currentGradeId];\n\t}\n}\n"],"names":["$3993f2fb442a9cdc$var$inputAurumNode","document","querySelector","$3993f2fb442a9cdc$var$injectedBarNode","Error","$3993f2fb442a9cdc$var$experienceBar","_grades","name","min","max","nextGradeId","_cssClasses","balance","balanceTotal","balanceProgress","balanceGradeStart","balanceGradeEnd","_balance","initBalance","addedBalance","totalBalance","_currentGradeId","constructor","injectedNode","this","_initNodes","_calcCurrentGradeId","_renderBalance","innerHTML","balanceNode","_querySelector","_nodes","balanceTotalNode","balanceProgressNode","balanceGradeStartNode","balanceGradeEndNode","parentNode","selector","node","addBalance","newBalance","_calcTotalBalance","setInitBalance","currentGrade","getCurrentGrade","nextGrade","setAttribute","String","value","textContent","undefined","idGrade","grade","Number","addEventListener","parseFloat","isNaN"],"version":3,"file":"index.e85827e4.js.map"}