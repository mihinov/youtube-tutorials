{"mappings":"ACEA,MAAM,EAA0C,SAAS,aAAa,CAAC,gBACjE,EAAsC,SAAS,aAAa,CAAC,iBAEnE,GAAI,AAAoB,OAApB,GAA4B,AAAmB,OAAnB,EAC/B,MAAM,AAAI,MAAM,qBAGjB,MAAM,EAAgB,ICDf,MA6BN,YAAY,CAAqB,CAAE,CA3B3B,IAAA,CAAA,OAAA,CAA+B,CACtC,EAAG,CAAE,KAAM,OAAQ,IAAK,EAAG,IAAK,GAAI,YAAa,CAAE,EACnD,EAAG,CAAE,KAAM,WAAY,IAAK,GAAI,IAAK,IAAK,YAAa,CAAE,EACzD,EAAG,CAAE,KAAM,UAAW,IAAK,IAAK,IAAK,IAAK,YAAa,CAAE,EACzD,EAAG,CAAE,KAAM,SAAU,IAAK,IAAK,IAAK,IAAK,YAAa,CAAE,EACxD,EAAG,CAAE,KAAM,cAAe,IAAK,IAAK,IAAK,IAAK,YAAa,CAAE,EAC7D,EAAG,CAAE,KAAM,aAAc,IAAK,IAAK,IAAK,IAAS,YAAa,IAAK,CACpE,EAIQ,IAAA,CAAA,WAAA,CAAuC,CAC9C,QAAS,UACT,aAAc,iBACd,gBAAiB,oBACjB,kBAAmB,uBACnB,gBAAiB,oBAClB,EAEQ,IAAA,CAAA,QAAA,CAAiC,CACxC,YAAa,EACb,aAAc,EACd,aAAc,CACf,EAEQ,IAAA,CAAA,eAAA,CAA0B,GAGjC,IAAI,CAAC,UAAU,CAAC,GAChB,IAAI,CAAC,mBAAmB,GACxB,IAAI,CAAC,cAAc,EACpB,CAEQ,WAAW,CAAqB,CAAQ,CAC/C,EAAa,SAAS,CAAG;AAAE;AACL;AACM;AAChB;AACyB;AACjC;AACwC;AACnB;AAC8B;AACC;AACzD;AAAU,EAET,CAAC,CAED,IAAM,EAAc,IAAI,CAAC,cAAc,CAAc,EAAc,IAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAElG,CAAA,IAAI,CAAC,MAAM,CAAG,CACb,YAAa,EACb,iBAAkB,IAAI,CAAC,cAAc,CAAc,EAAa,IAAM,IAAI,CAAC,WAAW,CAAC,YAAY,EACnG,oBAAqB,IAAI,CAAC,cAAc,CAAsB,EAAa,IAAM,IAAI,CAAC,WAAW,CAAC,eAAe,EACjH,sBAAuB,IAAI,CAAC,cAAc,CAAc,EAAa,IAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAC7G,oBAAqB,IAAI,CAAC,cAAc,CAAc,EAAa,IAAM,IAAI,CAAC,WAAW,CAAC,eAAe,CAC1G,CAED,CAEQ,eAA4B,CAA8B,CAAE,CAAgB,CAAK,CACxF,IAAM,EAAO,EAAW,aAAa,CAAC,GACtC,GAAI,AAAS,OAAT,EACH,MAAM,AAAI,MAAM,CAAC,2HAAiC,EAAE,EAAS,0DAAU,CAAC,EAEzE,OAAO,CACR,CAMA,WAAkB,CAAkB,CAAQ,CAC3C,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAG,EAC7B,IAAI,CAAC,iBAAiB,GACtB,IAAI,CAAC,mBAAmB,GACxB,IAAI,CAAC,cAAc,EACpB,CAMA,eAAsB,CAAmB,CAAQ,CAChD,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAG,EAC5B,IAAI,CAAC,iBAAiB,GACtB,IAAI,CAAC,mBAAmB,GACxB,IAAI,CAAC,cAAc,EACpB,CAEQ,gBAAuB,CAC9B,IAAM,EAAe,IAAI,CAAC,eAAe,GACnC,EAAY,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAG,EAAE,CAClD,EAAU,IAAI,CAAC,QAAQ,CAAC,YAAY,CACpC,EAAM,EAAa,GAAG,CACtB,EAAM,EAAa,GAAG,CAE5B,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,MAAO,OAAO,IAC3D,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,MAAO,OAAO,EAAM,IACjE,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAG,EAAU,EAClD,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAG,OAAO,GAClD,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,WAAW,CAAG,EAAa,IAAI,CAE7D,AAAc,KAAA,IAAd,EACH,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAG,EAAU,IAAI,CAE5D,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAG,GAGhD,CAEQ,mBAA0B,CACjC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,AACpF,CAEQ,qBAA4B,CACnC,IAAM,EAAe,IAAI,CAAC,QAAQ,CAAC,YAAY,CAE/C,IAAK,IAAM,KAAW,IAAI,CAAC,OAAO,CAAE,CACnC,IAAM,EAAQ,IAAI,CAAC,OAAO,CAAC,EAAQ,CAC7B,EAAM,EAAM,GAAG,CACf,EAAM,EAAM,GAAG,CAErB,GAAI,GAAgB,GAAO,EAAe,EAAK,CAC9C,IAAI,CAAC,eAAe,CAAG,OAAO,GAC9B,KACD,CAED,CACD,CAEO,iBAAsC,CAC5C,GAAI,AAAyB,KAAzB,IAAI,CAAC,eAAe,CACvB,MAAM,AAAI,MAAM,8CAGjB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,AAC1C,CACD,ED3IwC,GAExC,EAAc,cAAc,CAAC,IAE7B,EAAe,gBAAgB,CAAC,QAAS,KACxC,IAAM,EAAa,EAAe,KAAK,AAEnC,CAAA,WAAW,IAAe,GAAK,CAAC,MAAM,WAAW,IACpD,EAAc,UAAU,CAAC,WAAW,IACX,KAAf,GACV,EAAc,UAAU,CAAC,EAE3B","sources":["<anon>","youtube-experience-bar/scripts/index.ts","youtube-experience-bar/scripts/experience-bar.ts"],"sourcesContent":["class $3381ac0e0d5b9ce3$export$d5884bf0f43c13ae {\n    constructor(injectedNode){\n        this._grades = {\n            0: {\n                name: 'Iron',\n                min: 0,\n                max: 60,\n                nextGradeId: 1\n            },\n            1: {\n                name: 'Platinum',\n                min: 60,\n                max: 150,\n                nextGradeId: 2\n            },\n            2: {\n                name: 'Diamond',\n                min: 150,\n                max: 300,\n                nextGradeId: 3\n            },\n            3: {\n                name: 'Master',\n                min: 300,\n                max: 500,\n                nextGradeId: 4\n            },\n            4: {\n                name: 'Grandmaster',\n                min: 500,\n                max: 800,\n                nextGradeId: 5\n            },\n            5: {\n                name: 'Challenger',\n                min: 800,\n                max: 100000,\n                nextGradeId: null\n            }\n        };\n        this._cssClasses = {\n            balance: 'balance',\n            balanceTotal: 'balance__total',\n            balanceProgress: 'balance__progress',\n            balanceGradeStart: 'balance__grade_start',\n            balanceGradeEnd: 'balance__grade_end'\n        };\n        this._balance = {\n            initBalance: 0,\n            addedBalance: 0,\n            totalBalance: 0\n        };\n        this._currentGradeId = -1;\n        this._initNodes(injectedNode);\n        this._calcCurrentGradeId();\n        this._renderBalance();\n    }\n    _initNodes(injectedNode) {\n        injectedNode.innerHTML = `\n\t\t\t<div class=\"balance\">\n\t\t\t\t<div class=\"balance__text\">\n\t\t\t\t\t\\u{412}\\u{430}\\u{448} \\u{431}\\u{430}\\u{43B}\\u{430}\\u{43D}c:\n\t\t\t\t\t<span class=\"balance__total\">0</span>\n\t\t\t\t</div>\n\t\t\t\t<progress class=\"balance__progress\"></progress>\n\t\t\t\t<div class=\"balance__grades\">\n\t\t\t\t\t<div class=\"balance__grade balance__grade_start\">Iron</div>\n\t\t\t\t\t<div class=\"balance__grade balance__grade_end\">Platinum</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n        const balanceNode = this._querySelector(injectedNode, '.' + this._cssClasses.balance);\n        this._nodes = {\n            balanceNode: balanceNode,\n            balanceTotalNode: this._querySelector(balanceNode, '.' + this._cssClasses.balanceTotal),\n            balanceProgressNode: this._querySelector(balanceNode, '.' + this._cssClasses.balanceProgress),\n            balanceGradeStartNode: this._querySelector(balanceNode, '.' + this._cssClasses.balanceGradeStart),\n            balanceGradeEndNode: this._querySelector(balanceNode, '.' + this._cssClasses.balanceGradeEnd)\n        };\n    }\n    _querySelector(parentNode, selector) {\n        const node = parentNode.querySelector(selector);\n        if (node === null) throw new Error(`ExperienceBar: \\u{44D}\\u{43B}\\u{435}\\u{43C}\\u{435}\\u{43D}\\u{442} \\u{441} \\u{43A}\\u{43B}\\u{430}\\u{441}\\u{441}\\u{43E}\\u{43C} ${selector} \\u{43D}\\u{435} \\u{43D}\\u{430}\\u{439}\\u{434}\\u{435}\\u{43D}`);\n        return node;\n    }\n    /**\r\n\t * Функция для добавления нового баланса\r\n\t * @param {number} newBalance - Новое значение баланса, положительное число\r\n\t */ addBalance(newBalance) {\n        this._balance.addedBalance = newBalance;\n        this._calcTotalBalance();\n        this._calcCurrentGradeId();\n        this._renderBalance();\n    }\n    /**\r\n\t * Функция для установки изначального баланса\r\n\t * @param {number} initBalance - Значение изначального баланса\r\n\t */ setInitBalance(initBalance) {\n        this._balance.initBalance = initBalance;\n        this._calcTotalBalance();\n        this._calcCurrentGradeId();\n        this._renderBalance();\n    }\n    _renderBalance() {\n        const currentGrade = this.getCurrentGrade();\n        const nextGrade = this._grades[this._currentGradeId + 1];\n        const balance = this._balance.totalBalance;\n        const max = currentGrade.max;\n        const min = currentGrade.min;\n        this._nodes.balanceProgressNode.setAttribute('min', String(0));\n        this._nodes.balanceProgressNode.setAttribute('max', String(max - min));\n        this._nodes.balanceProgressNode.value = balance - min;\n        this._nodes.balanceTotalNode.textContent = String(balance);\n        this._nodes.balanceGradeStartNode.textContent = currentGrade.name;\n        if (nextGrade !== undefined) this._nodes.balanceGradeEndNode.textContent = nextGrade.name;\n        else this._nodes.balanceGradeEndNode.textContent = \"\\u221E\";\n    }\n    _calcTotalBalance() {\n        this._balance.totalBalance = this._balance.initBalance + this._balance.addedBalance;\n    }\n    _calcCurrentGradeId() {\n        const totalBalance = this._balance.totalBalance;\n        for(const idGrade in this._grades){\n            const grade = this._grades[idGrade];\n            const min = grade.min;\n            const max = grade.max;\n            if (totalBalance >= min && totalBalance < max) {\n                this._currentGradeId = Number(idGrade);\n                break;\n            }\n        }\n    }\n    getCurrentGrade() {\n        if (this._currentGradeId === -1) throw new Error(\"ExperienceBar: \\u0442\\u0435\\u043A\\u0443\\u0449\\u0438\\u0439 \\u0433\\u0440\\u0435\\u0439\\u0434 \\u043D\\u0435 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\");\n        return this._grades[this._currentGradeId];\n    }\n}\n\n\nconst $3993f2fb442a9cdc$var$inputAurumNode = document.querySelector('.input-aurum');\nconst $3993f2fb442a9cdc$var$injectedBarNode = document.querySelector('.injected-bar');\nif ($3993f2fb442a9cdc$var$injectedBarNode === null || $3993f2fb442a9cdc$var$inputAurumNode === null) throw new Error(\"\\u0427\\u0442\\u043E-\\u0442\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\");\nconst $3993f2fb442a9cdc$var$experienceBar = new (0, $3381ac0e0d5b9ce3$export$d5884bf0f43c13ae)($3993f2fb442a9cdc$var$injectedBarNode);\n$3993f2fb442a9cdc$var$experienceBar.setInitBalance(30);\n$3993f2fb442a9cdc$var$inputAurumNode.addEventListener('input', ()=>{\n    const newBalance = $3993f2fb442a9cdc$var$inputAurumNode.value;\n    if (parseFloat(newBalance) >= 0 && !isNaN(parseFloat(newBalance))) $3993f2fb442a9cdc$var$experienceBar.addBalance(parseFloat(newBalance));\n    else if (newBalance === '') $3993f2fb442a9cdc$var$experienceBar.addBalance(0);\n});\n\n\n//# sourceMappingURL=index.253b11fa.js.map\n","import { ExperienceBar } from \"./experience-bar\";\r\n\r\nconst inputAurumNode: HTMLInputElement | null = document.querySelector('.input-aurum');\r\nconst injectedBarNode: HTMLElement | null = document.querySelector('.injected-bar');\r\n\r\nif (injectedBarNode === null || inputAurumNode === null) {\r\n\tthrow new Error('Что-то не найдено');\r\n}\r\n\r\nconst experienceBar = new ExperienceBar(injectedBarNode);\r\n\r\nexperienceBar.setInitBalance(30);\r\n\r\ninputAurumNode.addEventListener('input', () => {\r\n\tconst newBalance = inputAurumNode.value;\r\n\r\n\tif (parseFloat(newBalance) >= 0 && !isNaN(parseFloat(newBalance))) {\r\n\t\texperienceBar.addBalance(parseFloat(newBalance));\r\n\t} else if (newBalance === '') {\r\n\t\texperienceBar.addBalance(0);\r\n\t}\r\n});\r\n\r\nexport {};\r\n","import {\r\n\tExperienceBarBalance,\r\n\tExperienceBarCssClasses,\r\n\tExperienceBarGrade,\r\n\tExperienceBarGrades,\r\n\tExperienceBarNodes\r\n} from \"../interfacesOrTypes\";\r\n\r\nexport class ExperienceBar {\r\n\r\n\tprivate _grades: ExperienceBarGrades = {\r\n\t\t0: { name: 'Iron', min: 0, max: 60, nextGradeId: 1 },\r\n\t\t1: { name: 'Platinum', min: 60, max: 150, nextGradeId: 2 },\r\n\t\t2: { name: 'Diamond', min: 150, max: 300, nextGradeId: 3 },\r\n\t\t3: { name: 'Master', min: 300, max: 500, nextGradeId: 4 },\r\n\t\t4: { name: 'Grandmaster', min: 500, max: 800, nextGradeId: 5 },\r\n\t\t5: { name: 'Challenger', min: 800, max: 100_000, nextGradeId: null }\r\n\t};\r\n\r\n\tprivate _nodes: ExperienceBarNodes;\r\n\r\n\tprivate _cssClasses: ExperienceBarCssClasses = {\r\n\t\tbalance: 'balance',\r\n\t\tbalanceTotal: 'balance__total',\r\n\t\tbalanceProgress: 'balance__progress',\r\n\t\tbalanceGradeStart: 'balance__grade_start',\r\n\t\tbalanceGradeEnd: 'balance__grade_end'\r\n\t};\r\n\r\n\tprivate _balance: ExperienceBarBalance = {\r\n\t\tinitBalance: 0,\r\n\t\taddedBalance: 0,\r\n\t\ttotalBalance: 0\r\n\t};\r\n\r\n\tprivate _currentGradeId: number = -1;\r\n\r\n\tconstructor(injectedNode: Element) {\r\n\t\tthis._initNodes(injectedNode);\r\n\t\tthis._calcCurrentGradeId();\r\n\t\tthis._renderBalance();\r\n\t}\r\n\r\n\tprivate _initNodes(injectedNode: Element): void {\r\n\t\tinjectedNode.innerHTML = `\r\n\t\t\t<div class=\"balance\">\r\n\t\t\t\t<div class=\"balance__text\">\r\n\t\t\t\t\tВаш баланc:\r\n\t\t\t\t\t<span class=\"balance__total\">0</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<progress class=\"balance__progress\"></progress>\r\n\t\t\t\t<div class=\"balance__grades\">\r\n\t\t\t\t\t<div class=\"balance__grade balance__grade_start\">Iron</div>\r\n\t\t\t\t\t<div class=\"balance__grade balance__grade_end\">Platinum</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\r\n\t\tconst balanceNode = this._querySelector<HTMLElement>(injectedNode, '.' +  this._cssClasses.balance);\r\n\r\n\t\tthis._nodes = {\r\n\t\t\tbalanceNode: balanceNode,\r\n\t\t\tbalanceTotalNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceTotal),\r\n\t\t\tbalanceProgressNode: this._querySelector<HTMLProgressElement>(balanceNode, '.' + this._cssClasses.balanceProgress),\r\n\t\t\tbalanceGradeStartNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceGradeStart),\r\n\t\t\tbalanceGradeEndNode: this._querySelector<HTMLElement>(balanceNode, '.' + this._cssClasses.balanceGradeEnd)\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate _querySelector<T = Element>(parentNode: Element | Document, selector: string): T {\r\n\t\tconst node = parentNode.querySelector(selector);\r\n\t\tif (node === null) {\r\n\t\t\tthrow new Error(`ExperienceBar: элемент с классом ${selector} не найден`);\r\n\t\t}\r\n\t\treturn node as T;\r\n\t}\r\n\r\n\t/**\r\n\t * Функция для добавления нового баланса\r\n\t * @param {number} newBalance - Новое значение баланса, положительное число\r\n\t */\r\n\tpublic addBalance(newBalance: number): void {\r\n\t\tthis._balance.addedBalance = newBalance;\r\n\t\tthis._calcTotalBalance();\r\n\t\tthis._calcCurrentGradeId();\r\n\t\tthis._renderBalance();\r\n\t}\r\n\r\n\t/**\r\n\t * Функция для установки изначального баланса\r\n\t * @param {number} initBalance - Значение изначального баланса\r\n\t */\r\n\tpublic setInitBalance(initBalance: number): void {\r\n\t\tthis._balance.initBalance = initBalance;\r\n\t\tthis._calcTotalBalance();\r\n\t\tthis._calcCurrentGradeId();\r\n\t\tthis._renderBalance();\r\n\t}\r\n\r\n\tprivate _renderBalance(): void {\r\n\t\tconst currentGrade = this.getCurrentGrade();\r\n\t\tconst nextGrade = this._grades[this._currentGradeId + 1];\r\n\t\tconst balance = this._balance.totalBalance;\r\n\t\tconst max = currentGrade.max;\r\n\t\tconst min = currentGrade.min;\r\n\r\n\t\tthis._nodes.balanceProgressNode.setAttribute('min', String(0));\r\n\t\tthis._nodes.balanceProgressNode.setAttribute('max', String(max - min));\r\n\t\tthis._nodes.balanceProgressNode.value = balance - min;\r\n\t\tthis._nodes.balanceTotalNode.textContent = String(balance);\r\n\t\tthis._nodes.balanceGradeStartNode.textContent = currentGrade.name;\r\n\r\n\t\tif (nextGrade !== undefined) {\r\n\t\t\tthis._nodes.balanceGradeEndNode.textContent = nextGrade.name;\r\n\t\t} else {\r\n\t\t\tthis._nodes.balanceGradeEndNode.textContent = '∞';\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate _calcTotalBalance(): void {\r\n\t\tthis._balance.totalBalance = this._balance.initBalance + this._balance.addedBalance;\r\n\t}\r\n\r\n\tprivate _calcCurrentGradeId(): void {\r\n\t\tconst totalBalance = this._balance.totalBalance;\r\n\r\n\t\tfor (const idGrade in this._grades) {\r\n\t\t\tconst grade = this._grades[idGrade];\r\n\t\t\tconst min = grade.min;\r\n\t\t\tconst max = grade.max;\r\n\r\n\t\t\tif (totalBalance >= min && totalBalance < max) {\r\n\t\t\t\tthis._currentGradeId = Number(idGrade);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getCurrentGrade(): ExperienceBarGrade {\r\n\t\tif (this._currentGradeId === -1) {\r\n\t\t\tthrow new Error('ExperienceBar: текущий грейд не установлен');\r\n\t\t}\r\n\r\n\t\treturn this._grades[this._currentGradeId];\r\n\t}\r\n}\r\n"],"names":["$3993f2fb442a9cdc$var$inputAurumNode","document","querySelector","$3993f2fb442a9cdc$var$injectedBarNode","Error","$3993f2fb442a9cdc$var$experienceBar","constructor","injectedNode","_grades","name","min","max","nextGradeId","_cssClasses","balance","balanceTotal","balanceProgress","balanceGradeStart","balanceGradeEnd","_balance","initBalance","addedBalance","totalBalance","_currentGradeId","_initNodes","_calcCurrentGradeId","_renderBalance","innerHTML","balanceNode","_querySelector","_nodes","balanceTotalNode","balanceProgressNode","balanceGradeStartNode","balanceGradeEndNode","parentNode","selector","node","addBalance","newBalance","_calcTotalBalance","setInitBalance","currentGrade","getCurrentGrade","nextGrade","setAttribute","String","value","textContent","undefined","idGrade","grade","Number","addEventListener","parseFloat","isNaN"],"version":3,"file":"index.253b11fa.js.map"}