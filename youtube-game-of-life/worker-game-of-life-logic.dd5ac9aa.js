class GameLifeLogic{#e=0;#t=!1;get activeCells(){return this.#e}#s=new Map;get field(){return this.#s}#i=new Map;get buffer(){return this.#i}#l=10;#r=10;get rows(){return this.#l}get cols(){return this.#r}constructor(){}#f(e){this.#s=new Map,this.#i=new Map,this.#e=0;for(let t=0;t<this.#l;t++)for(let s=0;s<this.#r;s++){const i=this.#h(t,s),l=1===Math.round(Math.random()),r=!0===e&&l;!0===r&&this.#e++,this.#s.set(i,r)}}initFields(e,t,s){return this.#l=t,this.#r=s,this.#t=e,this.#f(e),{cols:this.cols,rows:this.rows,activeCells:this.activeCells,field:this.field,buffer:this.buffer}}#h(e,t){return`${e}-${t}`}#o(e,t){let s=0;for(let i=-1;i<=1;i++)for(let l=-1;l<=1;l++){if(0===i&&0===l)continue;const r=e+i,f=t+l,h=this.#h(r,f);this.#s.get(h)&&s++}return s}#a(){this.#e=0,this.#i=new Map;for(let e=0;e<this.#l;e++)for(let t=0;t<this.#r;t++){const s=this.#o(e,t),i=this.#h(e,t);this.#s.get(i)?s<2||s>3?this.#i.set(i,!1):(this.#e++,this.#i.set(i,!0)):3===s?(this.#e++,this.#i.set(i,!0)):this.#i.set(i,!1)}[this.#s,this.#i]=[this.#i,this.#s]}updateField(){return this.#a(),{cols:this.cols,rows:this.rows,activeCells:this.activeCells,field:this.field,buffer:this.buffer}}deleteOrCreateCell(e,t){"delete"===e?(this.#e--,this.#s.set(t,!1)):"create"===e&&(this.#e++,this.#s.set(t,!0))}#d(e,t){if(e===this.#l&&t===this.#r)return;const s=this.#s,i=this.#l,l=this.#r;this.#s=new Map,this.#i=new Map,this.#e=0;for(let i=0;i<e;i++)for(let e=0;e<t;e++){const t=this.#h(i,e),l=s.get(t)||!1;!0===l&&this.#e++,this.#s.set(t,l)}if(e>i||t>l)for(let i=0;i<e;i++)for(let e=0;e<t;e++){const t=this.#h(i,e);if(!s.has(t)){const e=1===Math.round(Math.random()),s=!0===this.#t&&e;!0===s&&this.#e++,this.#s.set(t,s)}}if(e<i||t<l){for(let i=0;i<e;i++)for(let e=0;e<t;e++){const t=this.#h(i,e),l=!!s.get(t);!0===l&&this.#e++,this.#i.set(t,l)}this.#s=this.#i,this.#i=s}}resizeField(e,t,s){return this.#t=s,this.#l=e,this.#r=t,this.#d(e,t),{cols:this.cols,rows:this.rows,activeCells:this.activeCells,field:this.field,buffer:this.buffer}}}const gameOfLife=new GameLifeLogic;onmessage=function(e){const t=e.data,s=t.type,i=t.payload;if("initFields"===s){const e=gameOfLife.initFields(i.random,i.rows,i.cols);postMessage({type:"result: initFields",data:e})}else if("updateField"===s){const e=gameOfLife.updateField();postMessage({type:"result: updateField",data:e})}else if("deleteOrCreateCell"===s){const e=gameOfLife.deleteOrCreateCell(i.typeAction,i.key);postMessage({type:"result: deleteOrCreateCell",data:e})}else if("resizeField"===s){const e=gameOfLife.resizeField(i.newRows,i.newCols,i.random);postMessage({type:"result: resizeField",data:e})}};
//# sourceMappingURL=worker-game-of-life-logic.dd5ac9aa.js.map
