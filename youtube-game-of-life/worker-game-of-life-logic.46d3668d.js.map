{"mappings":"ACAA,MAAM,EACL,CAAA,CAAY,CAAG,CAAE,AACjB,EAAA,CAAO,CAAG,CAAA,CAAM,AAEhB,KAAI,aAAc,CACjB,OAAO,IAAI,CAAC,CAAA,CAAY,AACzB,CAOA,CAAA,CAAM,CAAG,IAAI,GAAM,AAEnB,KAAI,OAAQ,CACX,OAAO,IAAI,CAAC,CAAA,CAAM,AACnB,CAOA,CAAA,CAAO,CAAG,IAAI,GAAM,AAEpB,KAAI,QAAS,CACZ,OAAO,IAAI,CAAC,CAAA,CAAO,AACpB,CAGA,CAAA,CAAK,CAAG,EAAG,AACX,EAAA,CAAK,CAAG,EAAG,AAEX,KAAI,MAAO,CACV,OAAO,IAAI,CAAC,CAAA,CAAK,AAClB,CAEA,IAAI,MAAO,CACV,OAAO,IAAI,CAAC,CAAA,CAAK,AAClB,CAEA,aAAc,CAEd,CAQA,CAAA,CAAW,CAAC,CAAM,EACjB,IAAI,CAAC,CAAA,CAAM,CAAG,IAAI,IAClB,IAAI,CAAC,CAAA,CAAO,CAAG,IAAI,IACnB,IAAI,CAAC,CAAA,CAAY,CAAG,EAEpB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,CAAA,CAAK,CAAE,IAC/B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,CAAA,CAAK,CAAE,IAAK,CACpC,IAAM,EAAM,IAAI,CAAC,CAAA,CAAO,CAAC,EAAG,GACtB,EAAS,AAA8B,IAA9B,KAAK,KAAK,CAAC,KAAK,MAAM,IAC/B,EAAM,AAAW,CAAA,IAAX,GAAkB,CAClB,EAAA,IAAR,GAAc,IAAI,CAAC,CAAA,CAAY,GACnC,IAAI,CAAC,CAAA,CAAM,CAAC,GAAG,CAAC,EAAK,EACtB,CAEF,CAUA,WAAW,CAAM,CAAE,CAAI,CAAE,CAAI,CAAE,CAO9B,OANA,IAAI,CAAC,CAAA,CAAK,CAAG,EACb,IAAI,CAAC,CAAA,CAAK,CAAG,EACb,IAAI,CAAC,CAAA,CAAO,CAAG,EAEf,IAAI,CAAC,CAAA,CAAW,CAAC,GAEV,CACN,KAAM,IAAI,CAAC,IAAI,CACf,KAAM,IAAI,CAAC,IAAI,CACf,YAAa,IAAI,CAAC,WAAW,CAC7B,MAAO,IAAI,CAAC,KAAK,CACjB,OAAQ,IAAI,CAAC,MAAM,AACpB,CACD,CAQA,CAAA,CAAO,CAAC,CAAG,CAAE,CAAG,EACf,MAAO,CAAA,EAAG,EAAI,CAAC,EAAE,EAAA,CAAK,AACvB,CAQA,CAAA,CAAgB,CAAC,CAAC,CAAE,CAAC,EACpB,IAAI,EAAQ,EAEZ,IAAK,IAAI,EAAI,GAAI,GAAK,EAAG,IACxB,IAAK,IAAI,EAAI,GAAI,GAAK,EAAG,IAAK,CAC7B,GAAI,AAAM,IAAN,GAAW,AAAM,IAAN,EAAS,SACxB,IAAM,EAAM,AAAC,CAAA,EAAI,EAAI,IAAI,CAAC,CAAA,CAAI,AAAJ,EAAS,IAAI,CAAC,CAAA,CAAK,CACvC,EAAM,AAAC,CAAA,EAAI,EAAI,IAAI,CAAC,CAAA,CAAI,AAAJ,EAAS,IAAI,CAAC,CAAA,CAAK,CACvC,EAAM,IAAI,CAAC,CAAA,CAAO,CAAC,EAAK,GAE1B,IAAI,CAAC,CAAA,CAAM,CAAC,GAAG,CAAC,IACnB,GAEF,CAGD,OAAO,CACR,CAEA,CAAA,CAAY,GACX,IAAI,CAAC,CAAA,CAAY,CAAG,EACpB,IAAI,CAAC,CAAA,CAAO,CAAG,IAAI,IAEnB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,CAAA,CAAK,CAAE,IAC/B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,CAAA,CAAK,CAAE,IAAK,CACpC,IAAM,EAAa,IAAI,CAAC,CAAA,CAAgB,CAAC,EAAG,GACtC,EAAM,IAAI,CAAC,CAAA,CAAO,CAAC,EAAG,GAExB,IAAI,CAAC,CAAA,CAAM,CAAC,GAAG,CAAC,GACf,EAAa,GAAK,EAAa,EAClC,IAAI,CAAC,CAAA,CAAO,CAAC,GAAG,CAAC,EAAK,CAAA,IAEtB,IAAI,CAAC,CAAA,CAAY,GACjB,IAAI,CAAC,CAAA,CAAO,CAAC,GAAG,CAAC,EAAK,CAAA,IAGnB,AAAe,IAAf,GACH,IAAI,CAAC,CAAA,CAAY,GACjB,IAAI,CAAC,CAAA,CAAO,CAAC,GAAG,CAAC,EAAK,CAAA,IAEtB,IAAI,CAAC,CAAA,CAAO,CAAC,GAAG,CAAC,EAAK,CAAA,EAGzB,CAGD,CAAC,IAAI,CAAC,CAAA,CAAM,CAAE,IAAI,CAAC,CAAA,CAAO,CAAC,CAAG,CAAC,IAAI,CAAC,CAAA,CAAO,CAAE,IAAI,CAAC,CAAA,CAAM,CAAC,AAC1D,CAEA,aAAc,CAGb,OAFA,IAAI,CAAC,CAAA,CAAY,GAEV,CACN,KAAM,IAAI,CAAC,IAAI,CACf,KAAM,IAAI,CAAC,IAAI,CACf,YAAa,IAAI,CAAC,WAAW,CAC7B,MAAO,IAAI,CAAC,KAAK,CACjB,OAAQ,IAAI,CAAC,MAAM,AACpB,CACD,CAOA,mBAAmB,CAAU,CAAE,CAAG,CAAE,CAC/B,AAAe,WAAf,GACH,IAAI,CAAC,CAAA,CAAY,GACjB,IAAI,CAAC,CAAA,CAAM,CAAC,GAAG,CAAC,EAAK,CAAA,IACI,WAAf,IACV,IAAI,CAAC,CAAA,CAAY,GACjB,IAAI,CAAC,CAAA,CAAM,CAAC,GAAG,CAAC,EAAK,CAAA,GAEvB,CASA,CAAA,CAAY,CAAC,CAAO,CAAE,CAAO,CAAE,CAAM,EACpC,GAAI,IAAY,IAAI,CAAC,CAAA,CAAK,EAAI,IAAY,IAAI,CAAC,CAAA,CAAK,CAAE,OAEtD,IAAM,EAAW,IAAI,CAAC,CAAA,CAAM,CACtB,EAAU,IAAI,CAAC,CAAA,CAAK,CACpB,EAAU,IAAI,CAAC,CAAA,CAAK,AAE1B,CAAA,IAAI,CAAC,CAAA,CAAO,CAAG,EACf,IAAI,CAAC,CAAA,CAAK,CAAG,EACb,IAAI,CAAC,CAAA,CAAK,CAAG,EACb,IAAI,CAAC,CAAA,CAAM,CAAG,IAAI,IAClB,IAAI,CAAC,CAAA,CAAO,CAAG,IAAI,IACnB,IAAI,CAAC,CAAA,CAAY,CAAG,EAEpB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,IAC5B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,IAAK,CACjC,IAAM,EAAM,IAAI,CAAC,CAAA,CAAO,CAAC,EAAG,GACtB,EAAM,EAAS,GAAG,CAAC,IAAQ,CAAA,CACrB,EAAA,IAAR,GAAc,IAAI,CAAC,CAAA,CAAY,GACnC,IAAI,CAAC,CAAA,CAAM,CAAC,GAAG,CAAC,EAAK,EACtB,CAGD,GAAI,EAAU,GAAW,EAAU,EAClC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,IAC5B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,IAAK,CACjC,IAAM,EAAM,IAAI,CAAC,CAAA,CAAO,CAAC,EAAG,GAC5B,GAAI,CAAC,EAAS,GAAG,CAAC,GAAM,CACvB,IAAM,EAAS,AAA8B,IAA9B,KAAK,KAAK,CAAC,KAAK,MAAM,IAC/B,EAAM,AAAiB,CAAA,IAAjB,IAAI,CAAC,CAAA,CAAO,EAAY,CACxB,EAAA,IAAR,GAAc,IAAI,CAAC,CAAA,CAAY,GACnC,IAAI,CAAC,CAAA,CAAM,CAAC,GAAG,CAAC,EAAK,EACtB,CACD,CAIF,GAAI,EAAU,GAAW,EAAU,EAAS,CAC3C,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,IAC5B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,IAAK,CACjC,IAAM,EAAM,IAAI,CAAC,CAAA,CAAO,CAAC,EAAG,GACtB,EAAM,CAAC,CAAC,EAAS,GAAG,CAAC,EAEf,EAAA,IAAR,GAAc,IAAI,CAAC,CAAA,CAAY,GAEnC,IAAI,CAAC,CAAA,CAAO,CAAC,GAAG,CAAC,EAAK,EACvB,CAED,IAAI,CAAC,CAAA,CAAM,CAAG,IAAI,CAAC,CAAA,CAAO,CAC1B,IAAI,CAAC,CAAA,CAAO,CAAG,CAChB,CACD,CASA,YAAY,CAAO,CAAE,CAAO,CAAE,CAAM,CAAE,CAGrC,OAFA,IAAI,CAAC,CAAA,CAAY,CAAC,EAAS,EAAS,GAE7B,CACN,KAAM,IAAI,CAAC,IAAI,CACf,KAAM,IAAI,CAAC,IAAI,CACf,YAAa,IAAI,CAAC,WAAW,CAC7B,MAAO,IAAI,CAAC,KAAK,CACjB,OAAQ,IAAI,CAAC,MAAM,AACpB,CACD,CAGD,CAEA,MAAM,EAAa,IAAI,EAEvB,UAAY,SAAU,CAAK,EAC1B,IAAM,EAAO,EAAM,IAAI,CACjB,EAAO,EAAK,IAAI,CAChB,EAAU,EAAK,OAAO,AAExB,AAAS,CAAA,eAAT,EAGH,YAAY,CACX,KAAM,qBACN,KAJkB,EAAW,UAAU,CAAC,EAAQ,MAAM,CAAE,EAAQ,IAAI,CAAE,EAAQ,IAAI,CAKnF,GAEU,AAAS,gBAAT,EAGV,YAAY,CACX,KAAM,sBACN,KAJkB,EAAW,WAAW,EAKzC,GAEU,AAAS,uBAAT,EAGV,YAAY,CACX,KAAM,6BACN,KAJkB,EAAW,kBAAkB,CAAC,EAAQ,UAAU,CAAE,EAAQ,GAAG,CAKhF,GAEmB,gBAAT,GAGV,YAAY,CACX,KAAM,sBACN,KAJkB,EAAW,WAAW,CAAC,EAAQ,OAAO,CAAE,EAAQ,OAAO,CAAE,EAAQ,MAAM,CAK1F,EAGF","sources":["<anon>","youtube-game-of-life/only-ts/scripts/workers/worker-game-of-life-logic.js"],"sourcesContent":["class GameLifeLogic {\n    #activeCells = 0;\n    #random = false;\n    get activeCells() {\n        return this.#activeCells;\n    }\n    /**\n\t * Хранит состояние поля в виде карты, где ключ - строка с координатами ячейки, значение - булево значение,\n\t * показывающее, жива ли ячейка\n\t * @type {Map<string, boolean>}\n\t */ #field = new Map();\n    get field() {\n        return this.#field;\n    }\n    /**\n\t * Хранит временное состояние поля в виде карты, где ключ - строка с координатами ячейки,\n\t * значение - булево значение, показывающее, жива ли ячейка\n\t * @type {Map<string, boolean>}\n\t */ #buffer = new Map();\n    get buffer() {\n        return this.#buffer;\n    }\n    #rows = 10;\n    #cols = 10;\n    get rows() {\n        return this.#rows;\n    }\n    get cols() {\n        return this.#cols;\n    }\n    constructor(){}\n    /**\n\t * Приватная функция\n\t * Создаёт поле с нуля\n\t * @param {boolean} random - рандомно генерировать элементы или нет\n\t * @returns {void}\n\t */ #initFields(random) {\n        this.#field = new Map();\n        this.#buffer = new Map();\n        this.#activeCells = 0;\n        for(let i = 0; i < this.#rows; i++)for(let j = 0; j < this.#cols; j++){\n            const key = this.#getKey(i, j);\n            const rndVal = Math.round(Math.random()) === 1;\n            const val = random === true ? rndVal : false;\n            if (val === true) this.#activeCells++;\n            this.#field.set(key, val);\n        }\n    }\n    /**\n\t * Публичная функция\n\t * Создаёт поле с нуля\n\t * @param {boolean} random - рандомно генерировать элементы или нет\n\t * @param {number} rows - количество строк поля\n\t * @param {number} cols - количество столбцов поля\n\t * @returns {void}\n\t */ initFields(random, rows, cols) {\n        this.#rows = rows;\n        this.#cols = cols;\n        this.#random = random;\n        this.#initFields(random);\n        return {\n            cols: this.cols,\n            rows: this.rows,\n            activeCells: this.activeCells,\n            field: this.field,\n            buffer: this.buffer\n        };\n    }\n    /**\n\t * Возвращает ключ в формате строки для определенной строки и столбца\n\t * @param {number} row - номер строки\n\t * @param {number} col - номер столбца\n\t * @returns {string} - ключ в формате строки\n\t */ #getKey(row, col) {\n        return `${row}-${col}`;\n    }\n    /**\n\t * Возвращает количество соседей для определенной ячейки\n\t * @param {number} i - номер строки\n\t * @param {number} j - номер столбца\n\t * @returns {number} - количество соседей\n\t */ #countNeighbours(i, j) {\n        let count = 0;\n        for(let x = -1; x <= 1; x++)for(let y = -1; y <= 1; y++){\n            if (x === 0 && y === 0) continue; // Пропустить текущую ячейку\n            const row = (i + x + this.#rows) % this.#rows; // Использование операции % для циклической границы\n            const col = (j + y + this.#cols) % this.#cols; // Использование операции % для циклической границы\n            const key = this.#getKey(row, col);\n            if (this.#field.get(key)) count++;\n        }\n        return count;\n    }\n    #updateField() {\n        this.#activeCells = 0;\n        this.#buffer = new Map();\n        for(let i = 0; i < this.#rows; i++)for(let j = 0; j < this.#cols; j++){\n            const neighbours = this.#countNeighbours(i, j);\n            const key = this.#getKey(i, j);\n            if (this.#field.get(key)) {\n                if (neighbours < 2 || neighbours > 3) this.#buffer.set(key, false);\n                else {\n                    this.#activeCells++;\n                    this.#buffer.set(key, true);\n                }\n            } else if (neighbours === 3) {\n                this.#activeCells++;\n                this.#buffer.set(key, true);\n            } else this.#buffer.set(key, false);\n        }\n        [this.#field, this.#buffer] = [\n            this.#buffer,\n            this.#field\n        ];\n    }\n    updateField() {\n        this.#updateField();\n        return {\n            cols: this.cols,\n            rows: this.rows,\n            activeCells: this.activeCells,\n            field: this.field,\n            buffer: this.buffer\n        };\n    }\n    /**\n\t * Возвращает количество соседей для определенной ячейки\n\t * @param {'delete' | 'create'} typeAction - номер строки\n\t * @param {string} key - номер столбца\n\t */ deleteOrCreateCell(typeAction, key) {\n        if (typeAction === 'delete') {\n            this.#activeCells--;\n            this.#field.set(key, false);\n        } else if (typeAction === 'create') {\n            this.#activeCells++;\n            this.#field.set(key, true);\n        }\n    }\n    /**\n\t * Приватная функция\n\t * Изменяет размеры игрового поля\n\t * @param {number} newRows - количество строк\n\t * @param {number} newCols - количество стобцов\n\t * @param {boolean} random - рандомно генерировать ячейки или нет\n\t */ #resizeField(newRows, newCols, random) {\n        if (newRows === this.#rows && newCols === this.#cols) return;\n        const oldField = this.#field;\n        const oldRows = this.#rows;\n        const oldCols = this.#cols;\n        this.#random = random;\n        this.#rows = newRows;\n        this.#cols = newCols;\n        this.#field = new Map();\n        this.#buffer = new Map();\n        this.#activeCells = 0;\n        for(let i = 0; i < newRows; i++)for(let j = 0; j < newCols; j++){\n            const key = this.#getKey(i, j);\n            const val = oldField.get(key) || false;\n            if (val === true) this.#activeCells++;\n            this.#field.set(key, val);\n        }\n        if (newRows > oldRows || newCols > oldCols) {\n            for(let i = 0; i < newRows; i++)for(let j = 0; j < newCols; j++){\n                const key = this.#getKey(i, j);\n                if (!oldField.has(key)) {\n                    const rndVal = Math.round(Math.random()) === 1;\n                    const val = this.#random === true ? rndVal : false;\n                    if (val === true) this.#activeCells++;\n                    this.#field.set(key, val);\n                }\n            }\n        }\n        if (newRows < oldRows || newCols < oldCols) {\n            for(let i = 0; i < newRows; i++)for(let j = 0; j < newCols; j++){\n                const key = this.#getKey(i, j);\n                const val = !!oldField.get(key);\n                if (val === true) this.#activeCells++;\n                this.#buffer.set(key, val);\n            }\n            this.#field = this.#buffer;\n            this.#buffer = oldField;\n        }\n    }\n    /**\n\t * Публичная функция\n\t * Изменяет размеры игрового поля\n\t * @param {number} newRows - количество строк\n\t * @param {number} newCols - количество стобцов\n\t * @param {boolean} random - рандомно генерировать ячейки или нет\n\t */ resizeField(newRows, newCols, random) {\n        this.#resizeField(newRows, newCols, random);\n        return {\n            cols: this.cols,\n            rows: this.rows,\n            activeCells: this.activeCells,\n            field: this.field,\n            buffer: this.buffer\n        };\n    }\n}\nconst gameOfLife = new GameLifeLogic();\nonmessage = function(event) {\n    const data = event.data;\n    const type = data.type;\n    const payload = data.payload;\n    if (type === 'initFields') {\n        const dataToSend = gameOfLife.initFields(payload.random, payload.rows, payload.cols);\n        postMessage({\n            type: 'result: initFields',\n            data: dataToSend\n        });\n    } else if (type === 'updateField') {\n        const dataToSend = gameOfLife.updateField();\n        postMessage({\n            type: 'result: updateField',\n            data: dataToSend\n        });\n    } else if (type === 'deleteOrCreateCell') {\n        const dataToSend = gameOfLife.deleteOrCreateCell(payload.typeAction, payload.key);\n        postMessage({\n            type: 'result: deleteOrCreateCell',\n            data: dataToSend\n        });\n    } else if (type === 'resizeField') {\n        const dataToSend = gameOfLife.resizeField(payload.newRows, payload.newCols, payload.random);\n        postMessage({\n            type: 'result: resizeField',\n            data: dataToSend\n        });\n    }\n};\n\n//# sourceMappingURL=worker-game-of-life-logic.46d3668d.js.map\n","class GameLifeLogic {\n\t#activeCells = 0;\n\t#random = false;\n\n\tget activeCells() {\n\t\treturn this.#activeCells;\n\t}\n\n\t/**\n\t * Хранит состояние поля в виде карты, где ключ - строка с координатами ячейки, значение - булево значение,\n\t * показывающее, жива ли ячейка\n\t * @type {Map<string, boolean>}\n\t */\n\t#field = new Map();\n\n\tget field() {\n\t\treturn this.#field;\n\t}\n\n\t/**\n\t * Хранит временное состояние поля в виде карты, где ключ - строка с координатами ячейки,\n\t * значение - булево значение, показывающее, жива ли ячейка\n\t * @type {Map<string, boolean>}\n\t */\n\t#buffer = new Map();\n\n\tget buffer() {\n\t\treturn this.#buffer;\n\t}\n\n\n\t#rows = 10;\n\t#cols = 10;\n\n\tget rows() {\n\t\treturn this.#rows;\n\t}\n\n\tget cols() {\n\t\treturn this.#cols;\n\t}\n\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * Приватная функция\n\t * Создаёт поле с нуля\n\t * @param {boolean} random - рандомно генерировать элементы или нет\n\t * @returns {void}\n\t */\n\t#initFields(random) {\n\t\tthis.#field = new Map();\n\t\tthis.#buffer = new Map();\n\t\tthis.#activeCells = 0;\n\n\t\tfor (let i = 0; i < this.#rows; i++) {\n\t\t\tfor (let j = 0; j < this.#cols; j++) {\n\t\t\t\tconst key = this.#getKey(i, j);\n\t\t\t\tconst rndVal = Math.round(Math.random()) === 1;\n\t\t\t\tconst val = random === true ? rndVal : false;\n\t\t\t\tif (val === true) this.#activeCells++;\n\t\t\t\tthis.#field.set(key, val);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Публичная функция\n\t * Создаёт поле с нуля\n\t * @param {boolean} random - рандомно генерировать элементы или нет\n\t * @param {number} rows - количество строк поля\n\t * @param {number} cols - количество столбцов поля\n\t * @returns {void}\n\t */\n\tinitFields(random, rows, cols) {\n\t\tthis.#rows = rows;\n\t\tthis.#cols = cols;\n\t\tthis.#random = random;\n\n\t\tthis.#initFields(random);\n\n\t\treturn {\n\t\t\tcols: this.cols,\n\t\t\trows: this.rows,\n\t\t\tactiveCells: this.activeCells,\n\t\t\tfield: this.field,\n\t\t\tbuffer: this.buffer\n\t\t}\n\t}\n\n\t/**\n\t * Возвращает ключ в формате строки для определенной строки и столбца\n\t * @param {number} row - номер строки\n\t * @param {number} col - номер столбца\n\t * @returns {string} - ключ в формате строки\n\t */\n\t#getKey(row, col) {\n\t\treturn `${row}-${col}`;\n\t}\n\n\t/**\n\t * Возвращает количество соседей для определенной ячейки\n\t * @param {number} i - номер строки\n\t * @param {number} j - номер столбца\n\t * @returns {number} - количество соседей\n\t */\n\t#countNeighbours(i, j) {\n\t\tlet count = 0;\n\n\t\tfor (let x = -1; x <= 1; x++) {\n\t\t\tfor (let y = -1; y <= 1; y++) {\n\t\t\t\tif (x === 0 && y === 0) continue; // Пропустить текущую ячейку\n\t\t\t\tconst row = (i + x + this.#rows) % this.#rows; // Использование операции % для циклической границы\n\t\t\t\tconst col = (j + y + this.#cols) % this.#cols; // Использование операции % для циклической границы\n\t\t\t\tconst key = this.#getKey(row, col);\n\n\t\t\t\tif (this.#field.get(key)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t#updateField() {\n\t\tthis.#activeCells = 0;\n\t\tthis.#buffer = new Map();\n\n\t\tfor (let i = 0; i < this.#rows; i++) {\n\t\t\tfor (let j = 0; j < this.#cols; j++) {\n\t\t\t\tconst neighbours = this.#countNeighbours(i, j);\n\t\t\t\tconst key = this.#getKey(i, j);\n\n\t\t\t\tif (this.#field.get(key)) {\n\t\t\t\t\tif (neighbours < 2 || neighbours > 3) {\n\t\t\t\t\t\tthis.#buffer.set(key, false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.#activeCells++;\n\t\t\t\t\t\tthis.#buffer.set(key, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (neighbours === 3) {\n\t\t\t\t\t\tthis.#activeCells++;\n\t\t\t\t\t\tthis.#buffer.set(key, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.#buffer.set(key, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t[this.#field, this.#buffer] = [this.#buffer, this.#field];\n\t}\n\n\tupdateField() {\n\t\tthis.#updateField();\n\n\t\treturn {\n\t\t\tcols: this.cols,\n\t\t\trows: this.rows,\n\t\t\tactiveCells: this.activeCells,\n\t\t\tfield: this.field,\n\t\t\tbuffer: this.buffer\n\t\t}\n\t}\n\n\t/**\n\t * Возвращает количество соседей для определенной ячейки\n\t * @param {'delete' | 'create'} typeAction - номер строки\n\t * @param {string} key - номер столбца\n\t */\n\tdeleteOrCreateCell(typeAction, key) {\n\t\tif (typeAction === 'delete') {\n\t\t\tthis.#activeCells--;\n\t\t\tthis.#field.set(key, false);\n\t\t} else if (typeAction === 'create') {\n\t\t\tthis.#activeCells++\n\t\t\tthis.#field.set(key, true);\n\t\t}\n\t}\n\n\t/**\n\t * Приватная функция\n\t * Изменяет размеры игрового поля\n\t * @param {number} newRows - количество строк\n\t * @param {number} newCols - количество стобцов\n\t * @param {boolean} random - рандомно генерировать ячейки или нет\n\t */\n\t#resizeField(newRows, newCols, random) {\n\t\tif (newRows === this.#rows && newCols === this.#cols) return;\n\n\t\tconst oldField = this.#field;\n\t\tconst oldRows = this.#rows;\n\t\tconst oldCols = this.#cols;\n\n\t\tthis.#random = random;\n\t\tthis.#rows = newRows;\n\t\tthis.#cols = newCols;\n\t\tthis.#field = new Map();\n\t\tthis.#buffer = new Map();\n\t\tthis.#activeCells = 0;\n\n\t\tfor (let i = 0; i < newRows; i++) {\n\t\t\tfor (let j = 0; j < newCols; j++) {\n\t\t\t\tconst key = this.#getKey(i, j);\n\t\t\t\tconst val = oldField.get(key) || false;\n\t\t\t\tif (val === true) this.#activeCells++;\n\t\t\t\tthis.#field.set(key, val);\n\t\t\t}\n\t\t}\n\n\t\tif (newRows > oldRows || newCols > oldCols) {\n\t\t\tfor (let i = 0; i < newRows; i++) {\n\t\t\t\tfor (let j = 0; j < newCols; j++) {\n\t\t\t\t\tconst key = this.#getKey(i, j);\n\t\t\t\t\tif (!oldField.has(key)) {\n\t\t\t\t\t\tconst rndVal = Math.round(Math.random()) === 1;\n\t\t\t\t\t\tconst val = this.#random === true ? rndVal : false;\n\t\t\t\t\t\tif (val === true) this.#activeCells++;\n\t\t\t\t\t\tthis.#field.set(key, val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (newRows < oldRows || newCols < oldCols) {\n\t\t\tfor (let i = 0; i < newRows; i++) {\n\t\t\t\tfor (let j = 0; j < newCols; j++) {\n\t\t\t\t\tconst key = this.#getKey(i, j);\n\t\t\t\t\tconst val = !!oldField.get(key);\n\n\t\t\t\t\tif (val === true) this.#activeCells++;\n\n\t\t\t\t\tthis.#buffer.set(key, val);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.#field = this.#buffer;\n\t\t\tthis.#buffer = oldField;\n\t\t}\n\t}\n\n\t/**\n\t * Публичная функция\n\t * Изменяет размеры игрового поля\n\t * @param {number} newRows - количество строк\n\t * @param {number} newCols - количество стобцов\n\t * @param {boolean} random - рандомно генерировать ячейки или нет\n\t */\n\tresizeField(newRows, newCols, random) {\n\t\tthis.#resizeField(newRows, newCols, random);\n\n\t\treturn {\n\t\t\tcols: this.cols,\n\t\t\trows: this.rows,\n\t\t\tactiveCells: this.activeCells,\n\t\t\tfield: this.field,\n\t\t\tbuffer: this.buffer\n\t\t}\n\t}\n\n\n}\n\nconst gameOfLife = new GameLifeLogic();\n\nonmessage = function (event) {\n\tconst data = event.data;\n\tconst type = data.type;\n\tconst payload = data.payload;\n\n\tif (type === 'initFields') {\n\t\tconst dataToSend = gameOfLife.initFields(payload.random, payload.rows, payload.cols);\n\n\t\tpostMessage({\n\t\t\ttype: 'result: initFields',\n\t\t\tdata: dataToSend\n\t\t});\n\n\t} else if (type === 'updateField') {\n\t\tconst dataToSend = gameOfLife.updateField();\n\n\t\tpostMessage({\n\t\t\ttype: 'result: updateField',\n\t\t\tdata: dataToSend\n\t\t});\n\n\t} else if (type === 'deleteOrCreateCell') {\n\t\tconst dataToSend = gameOfLife.deleteOrCreateCell(payload.typeAction, payload.key);\n\n\t\tpostMessage({\n\t\t\ttype: 'result: deleteOrCreateCell',\n\t\t\tdata: dataToSend\n\t\t});\n\n\t} else if (type === 'resizeField') {\n\t\tconst dataToSend = gameOfLife.resizeField(payload.newRows, payload.newCols, payload.random);\n\n\t\tpostMessage({\n\t\t\ttype: 'result: resizeField',\n\t\t\tdata: dataToSend\n\t\t});\n\n\t}\n};\n"],"names":["GameLifeLogic","activeCells","Map","field","buffer","rows","cols","constructor","random","i","j","key","rndVal","Math","round","val","set","initFields","row","col","count","x","y","get","neighbours","updateField","deleteOrCreateCell","typeAction","newRows","newCols","oldField","oldRows","oldCols","has","resizeField","gameOfLife","onmessage","event","data","type","payload","postMessage"],"version":3,"file":"worker-game-of-life-logic.46d3668d.js.map"}