{"mappings":"gRAAO,SAASA,EAAgBC,EAAgBC,EAAmB,GACjE,MAAMC,EAAM,CACVC,GAAI,GAEN,IAAIC,EAAQC,KAAKC,MAEjB,MAAMC,EAAU,KAChB,GAAiB,IAAbN,EAGH,OAFAD,SACAE,EAAIC,GAAKK,sBAAsBD,IAK9B,MAAMD,EAAMD,KAAKC,MACXG,EAAQH,EAAMF,EAEhBK,GAASR,IACXD,IACAI,EAAQE,EAAOG,EAAQR,GAGzBC,EAAIC,GAAKK,sBAAsBD,EAAA,EAKjC,OAFAL,EAAIC,GAAKK,sBAAsBD,GAExBL,CACT,CC5BO,SAASQ,EAAmBC,EAAyBC,EAAaC,GAaxE,IAAIC,EAAQC,SAASJ,EAAMG,OAY3B,OAVIE,MAAMF,IAECA,EAAQF,EADlBE,EAAQF,EAGEE,EAAQD,IAClBC,EAAQD,GAGTF,EAAMG,MAAQA,EAAMG,WAEbH,CACR,C,iVCJA,IAAAI,EACAC,E,iFArBA,IAAIC,EAAU,CAAC,EAoBfF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,GAElC,EAaAL,EAXA,SAAiBhB,GACf,IAAIuB,EAAWN,EAAQjB,GAEvB,GAAgB,MAAZuB,EACF,MAAM,IAAIC,MAAM,oCAAsCxB,GAGxD,OAAOuB,CACT,C,ICpBAE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,oH,QCEzDC,EAAiB,SAAUC,EAAWC,EAAQC,GAC5C,GAAID,IAAWE,KAAKC,SAASH,OAG3B,OAAOD,EAGP,IAAIK,EAASH,EAAQ,UAAYL,KAAKS,UAAUN,GAAa,IAAM,iBAAmBH,KAAKS,UAAUN,GAAa,KAClH,OAAOO,IAAIC,gBAAgB,IAAIC,KAAK,CAACJ,GAAS,CAC5CK,KAAM,2BAGZ,ECbA,IAAIC,EAAA,IAAAJ,IAA0BZ,EAAA,SAAAiB,QAA6C,SAAAC,OAAAC,KAAAC,KAC3EC,EAAiBjB,EAAUY,EAAI3B,WAAY2B,EAAIV,QAAQ,GCAvD,MAAMgB,EAAaC,SAASC,cAAiC,WACvDC,EAAYF,SAASC,cAA2B,UAEtD,GAAmB,OAAfF,GAAqC,OAAdG,EAC1B,MAAM,IAAI1B,MAAM,oBAGjB,MAAM2B,EAAO,ICJN,MAUEC,OAAiB,EACjBC,QAAkB,EAClBvD,SAAmB,IACnBwD,SAAmB,EACnBC,cAAwB,EACxBC,aAAuB,EACvBC,QAAkB,EAClBC,MAAgB,EAChBC,YAAsB,EACtBC,iBAA2B,EAC3BC,YAAsB,EACtBC,gBAA0B,EAE1BC,OAAiB,IAAIC,OAAAlB,GACrBmB,SAAmB,EACnBC,aAAwC,KACxCC,aAAuB,EAE/BC,aAAYC,WAAEA,EAAUC,UAAEA,EAASC,YAAEA,EAAWC,YAAEA,EAAWf,OAAEA,EAAMC,MAAEA,EAAKE,gBAAEA,EAAeO,YAAEA,IAC9F,GAAIT,EAAQ,EACX,MAAM,IAAIlC,MAAM,4CAEjB,GAAIkC,EAAQ,GACX,MAAM,IAAIlC,MAAM,6CAGjBiD,KAAKC,IAAML,EAAWM,WAAW,MACjCF,KAAKG,KAAOL,EACZE,KAAKI,KAAOL,EACZC,KAAKhB,OAASA,EACdgB,KAAKf,MAAQA,EACbe,KAAKb,gBAAkBA,EACvBa,KAAKN,YAAcA,EAEnBM,KAAKK,UAAUT,EAAYC,GACvBG,KAAKb,iBAAiBa,KAAKM,kBAC/BN,KAAKO,gBACLP,KAAKQ,gBACLR,KAAKS,eACLT,KAAKU,iBACLV,KAAKW,kBAELX,KAAKY,qBAAqB,CACzB5B,OAAQgB,KAAKhB,OACbmB,KAAMH,KAAKG,KACXC,KAAMJ,KAAKI,OAEXS,MAAK,EAAC3B,YAAEA,EAAW4B,MAAEA,EAAKC,OAAEA,MAC5Bf,KAAKgB,qBACLhB,KAAKiB,YACLjB,KAAKkB,aAAW,GAGlB,CAEQR,iBACPV,KAAKmB,MAAMC,mBAAmBlF,MAAQmF,OAAOrB,KAAKG,MAClDH,KAAKmB,MAAMG,mBAAmBpF,MAAQmF,OAAOrB,KAAKI,KACnD,CAEQO,kBACPX,KAAKuB,YAAYvB,KAAKN,YACvB,CAEQ8B,gBACPxB,KAAKmB,MAAMC,mBAAmBK,UAAW,EACzCzB,KAAKmB,MAAMG,mBAAmBG,UAAW,CAC1C,CAEQC,eACP1B,KAAKmB,MAAMC,mBAAmBK,UAAW,EACzCzB,KAAKmB,MAAMG,mBAAmBG,UAAW,EAEf,OAAtBzB,KAAKP,eACRO,KAAKP,aAAakC,QAClB3B,KAAKP,aAAe,KAEtB,CAEQmB,sBAAqB5B,OAC5BA,EAAMmB,KAAEA,EAAIC,KAAEA,IAGdJ,KAAK4B,OACL5B,KAAKwB,gBAELxB,KAAKV,OAAOuC,YAAY,CACvB9D,KAAM,aACN+D,QAAS,CACR9C,OAAQA,EACRmB,KAAMA,EACNC,KAAMA,KA0BR,OAtBqB,IAAI2B,SAAgC,CAAC9D,EAAS+D,KAClEhC,KAAKV,OAAO2C,UAAaC,IACxB,MAAMC,EAAUD,EAAME,KAKtB,GAHApC,KAAKqC,eACLrC,KAAK0B,eAEgB,uBAAjBS,EAAQpE,KAA+B,CAC1C,MAAMqE,EAA+BD,EAAQC,MACvClD,YAAEA,EAAW4B,MAAEA,EAAKC,OAAEA,GAAWqB,EAEvCpC,KAAKd,YAAcA,EACnBc,KAAKc,MAAQA,EACbd,KAAKe,OAASA,EAEd9C,EAAQmE,EACT,CAEAJ,GAAO,EAAK,CACb,GAIF,CAEQJ,OACP5B,KAAKR,SAAU,EACfQ,KAAKmB,MAAMmB,cAAcC,UAAUC,IAAI,sBACvCxC,KAAKmB,MAAMtB,UAAU0C,UAAUC,IAAI,aACpC,CAEQH,eACPrC,KAAKR,SAAU,EACfQ,KAAKmB,MAAMmB,cAAcC,UAAUE,OAAO,sBAC1CzC,KAAKmB,MAAMtB,UAAU0C,UAAUE,OAAO,aACvC,CAEQzB,qBACP0B,OAAOC,iBAAiB,SAAU3C,KAAK4C,eAChBF,OAAOG,WAAW,gCAE1BF,iBAAiB,SAAU3C,KAAK8C,qBAE/C9C,KAAKmB,MAAM4B,eAAeJ,iBAAiB,SAAS,MAC/B,IAAhB3C,KAAKpB,QAGToB,KAAKgD,UAAQ,IAGdhD,KAAKmB,MAAM8B,cAAcN,iBAAiB,SAAS,MAC9B,IAAhB3C,KAAKpB,QAGToB,KAAKkD,WAAS,IAIflD,KAAKmB,MAAMgC,kBAAkBR,iBAAiB,QAAS3C,KAAKoD,mBAE5DpD,KAAKmB,MAAMvB,WAAW+C,iBAAiB,eAAgBT,IACtD,IAAqB,IAAjBlC,KAAKR,QAAT,CACA,GAAqB,IAAjB0C,EAAMmB,QAAiC,IAAjBnB,EAAMmB,OAAc,OAAO,EACrDrD,KAAKZ,YAAa,EAClBY,KAAKX,gBAAiB,CAHK,CAGA,IAG5BW,KAAKmB,MAAMvB,WAAW+C,iBAAiB,eAAgBT,IACtD,GAAqB,IAAjBA,EAAMmB,QAAiC,IAAjBnB,EAAMmB,OAAc,OAAO,GAC7B,IAApBrD,KAAKZ,aAAwC,IAAjBY,KAAKR,UACpCQ,KAAKX,gBAAiB,EACtBW,KAAKsD,oBAAoBpB,GAAO,GACjC,IAGD3D,SAASoE,iBAAiB,aAAcT,IACvC,GAAqB,IAAjBA,EAAMmB,QAAiC,IAAjBnB,EAAMmB,OAAc,OAAO,GAE5B,IADArD,KAAKuD,iBAAiBrB,EAAOlC,KAAKmB,MAAMtB,cAErC,IAAxBG,KAAKX,iBAA6C,IAAjBW,KAAKR,SAAmBQ,KAAKsD,oBAAoBpB,GAAO,GAE7FlC,KAAKZ,YAAa,EAClBY,KAAKX,gBAAiB,EAAK,IAG5BW,KAAKmB,MAAMqC,wBAAwBb,iBAAiB,SAAS,KAC5D3C,KAAKhB,QAAUgB,KAAKhB,OAChBgB,KAAKb,iBAAiBa,KAAKyD,gBAAgB,SAAUzD,KAAKhB,QAC9DgB,KAAK0D,cAAY,IAGlB1D,KAAKmB,MAAMwC,oBAAoBhB,iBAAiB,QAAS3C,KAAK4D,sBAC9D5D,KAAKmB,MAAM0C,eAAelB,iBAAiB,QAAS3C,KAAK8D,OAEzD9D,KAAKmB,MAAM4C,cAAcpB,iBAAiB,SAAS,KAClD3C,KAAKwB,gBACLxB,KAAKgE,YAAYnD,MAAKuB,IACrBpC,KAAK0B,cAAY,GAClB,IAGD1B,KAAKmB,MAAMC,mBAAmBuB,iBAAiB,SAAS,KACvD,MAAMsB,EAAUnI,EAAmBkE,KAAKmB,MAAMC,mBAAoB,EAAG,KACjEpB,KAAKb,iBAAiBa,KAAKyD,gBAAgB,OAAQQ,GAEvDjE,KAAKP,aAAeO,KAAKmB,MAAMC,mBAC/BpB,KAAKkE,gBAAgBD,EAAA,IAGtBjE,KAAKmB,MAAMG,mBAAmBqB,iBAAiB,SAAS,KACvD,MAAMwB,EAAUrI,EAAmBkE,KAAKmB,MAAMG,mBAAoB,EAAG,KACjEtB,KAAKb,iBAAiBa,KAAKyD,gBAAgB,OAAQU,GAEvDnE,KAAKP,aAAeO,KAAKmB,MAAMG,mBAC/BtB,KAAKoE,gBAAgBD,EAAA,IAGtBnE,KAAKmB,MAAMkD,eAAe1B,iBAAiB,SAAS,KACnD3C,KAAKN,aAAeM,KAAKN,YACzBM,KAAKuB,YAAYvB,KAAKN,YAAW,GAEnC,CAEQ6B,YAAe7B,KACO,IAAzBM,KAAKb,iBAA0Ba,KAAKyD,gBAAgB,cAAezD,KAAKN,cAEnD,IAArBM,KAAKN,aACRM,KAAKmB,MAAMtB,UAAU0C,UAAUC,IAAI,gBACnCxC,KAAKmB,MAAMkD,eAAeC,YAAc,YAExCtE,KAAKmB,MAAMtB,UAAU0C,UAAUE,OAAO,gBACtCzC,KAAKmB,MAAMkD,eAAeC,YAAc,SACzC,EAGOJ,gBAAgBD,IACF,IAAjBjE,KAAKR,SAETQ,KAAKuE,sBAAsBN,EAASjE,KAAKI,KAAMJ,KAAKhB,QACnD6B,MAAMuB,IACNpC,KAAKQ,gBACLR,KAAKiB,YACLjB,KAAKwE,aACLxE,KAAKkB,aAAW,GAElB,CAEQkD,gBAAgBD,IACF,IAAjBnE,KAAKR,SAETQ,KAAKuE,sBAAsBvE,KAAKG,KAAMgE,EAASnE,KAAKhB,QACnD6B,MAAMuB,IACNpC,KAAKQ,gBACLR,KAAKiB,YACLjB,KAAKwE,aACLxE,KAAKkB,aAAW,GAElB,CAEQqD,sBAAsBN,EAAiBE,EAAiBnF,GAC/DgB,KAAK4B,OACL5B,KAAKwB,gBAELxB,KAAKV,OAAOuC,YAAY,CACvB9D,KAAM,cACN+D,QAAS,CACRmC,QAASA,EACTE,QAASA,EACTnF,OAAQA,KA6BV,OAzBqB,IAAI+C,SAAgC,CAAC9D,EAAS+D,KAClEhC,KAAKV,OAAO2C,UAAaC,IACxB,MAAMC,EAAUD,EAAME,KAMtB,GAJApC,KAAKqC,eACLrC,KAAK0B,eAGgB,wBAAjBS,EAAQpE,KAAgC,CAC3C,MAAMqE,EAA+BD,EAAQC,MACvCtB,MAAEA,EAAKC,OAAEA,EAAM7B,YAAEA,EAAWiB,KAAEA,EAAIC,KAAEA,GAASgC,EAEnDpC,KAAKc,MAAQA,EACbd,KAAKe,OAASA,EACdf,KAAKd,YAAcA,EACnBc,KAAKG,KAAOA,EACZH,KAAKI,KAAOA,EAEZnC,EAAQmE,EACT,CAEAJ,GAAO,EAAK,CACb,IACEyC,OAAM,QAGV,CAEQlB,iBAAiBrB,EAAmBwC,GAI3C,IAAIC,EAHWzC,EAAM0C,OAIrB,KAAsB,MAAfD,GAAqB,CAC3B,GAAIA,IAAgBD,EACnB,OAAO,EAERC,EAAcA,EAAYE,aAC3B,CAGA,OAAO,CACR,CAEQC,6BAA6BC,EAAiCC,GACrEhF,KAAK4B,OAEL5B,KAAKV,OAAOuC,YAAY,CACvB9D,KAAM,qBACN+D,QAAS,CACRiD,WAAYA,EACZC,IAAKA,KAmBP,OAfqB,IAAIjD,SAAgC,CAAC9D,EAAS+D,KAClEhC,KAAKV,OAAO2C,UAAaC,IACxB,MAAMC,EAAUD,EAAME,KAItB,GAFApC,KAAKqC,eAEgB,+BAAjBF,EAAQpE,KAAuC,CAClD,MAAMqE,EAA+BD,EAAQC,KAC7CnE,EAAQmE,EACT,CAEAJ,GAAO,EAAK,CACb,GAIF,CAEQsB,oBAAsB,CAACpB,EAAmB+C,GAAiB,KAClE,IAAoB,IAAhBjF,KAAKpB,OACR,OAED,MAAMsG,EAAOlF,KAAKmB,MAAMvB,WAAWuF,wBAC7BC,EAAIlD,EAAMmD,QAAUH,EAAKI,KACzBC,EAAIrD,EAAMsD,QAAUN,EAAKO,IACzBC,EAAMC,KAAKC,MAAMR,EAAIpF,KAAK6F,UAC1BC,EAAMH,KAAKC,MAAML,EAAIvF,KAAK6F,UAC1Bb,EAAMhF,KAAK+F,OAAOD,EAAKJ,GAEvBM,EAAchG,KAAKc,MAAMmF,IAAIjB,GAQ7BkB,EAAa,KAClBlG,KAAKd,cACLc,KAAKc,MAAMqF,IAAInB,GAAK,GACpBhF,KAAK8E,6BAA6B,SAAUE,GAAKnE,MAAI,GAGlC,IAAhBmF,IAAmC,IAAVf,IAEF,IAAhBe,IAAmC,IAAVf,EADnCiB,KAG0B,IAAhBF,IAAkC,IAAVf,GAhBhB,MAClBjF,KAAKd,cACLc,KAAKc,MAAMqF,IAAInB,GAAK,GACpBhF,KAAK8E,6BAA6B,SAAUE,GAAKnE,MAAI,EAcrDuF,GAGDpG,KAAKqG,mBACLrG,KAAKiB,WAAS,EAGPV,gBACP,MAAMtE,EAAMqK,OAAOtG,KAAKmB,MAAMwC,oBAAoB1H,KAC5CD,EAAMsK,OAAOtG,KAAKmB,MAAMwC,oBAAoB3H,KAG5CE,EAAQF,GADQgE,KAAKf,MAAQ,GAAK,GACHhD,EAAMD,GAE3CgE,KAAKmB,MAAMwC,oBAAoBzH,MAAQmF,OAAOnF,GAC9C8D,KAAKmB,MAAMoF,mBAAmBjC,YAAcjD,OAAOrB,KAAKf,MACzD,CAEQ2E,qBAAuB,KAC9B,MAAM4C,EAAgBxG,KAAKpB,OAC3BoB,KAAKgD,WAEL,MAAMyD,EAAazG,KAAKmB,MAAMwC,oBAAoB+C,cAC5CzK,EAAMqK,OAAOtG,KAAKmB,MAAMwC,oBAAoB1H,KAC5CD,EAAMsK,OAAOtG,KAAKmB,MAAMwC,oBAAoB3H,KAM5C2K,EAAWL,QAA6B,IAHxBG,EAAazK,IADvBC,EAAMD,IAIiC,GAAG4K,QAAQ,IAC9D5G,KAAKf,MAAQ0H,EAEb3G,KAAKmB,MAAMoF,mBAAmBjC,YAAcjD,OAAOrB,KAAKf,OAEpDe,KAAKb,iBAAiBa,KAAKyD,gBAAgB,QAASzD,KAAKf,QAEvC,IAAlBuH,GAAwBxG,KAAKkD,WAAS,EAGnC5C,kBACP,MAAMuG,EAAmB7G,KAAK8G,uBAEEC,IAA5BF,EAAiB7H,SACpBgB,KAAKhB,OAAS6H,EAAiB7H,aAGD+H,IAA3BF,EAAiB5H,QACpBe,KAAKf,MAAQ4H,EAAiB5H,YAGD8H,IAA1BF,EAAiB1G,OACpBH,KAAKG,KAAO0G,EAAiB1G,WAGA4G,IAA1BF,EAAiBzG,OACpBJ,KAAKI,KAAOyG,EAAiBzG,WAGO2G,IAAjCF,EAAiBnH,cACpBM,KAAKN,YAAcmH,EAAiBnH,YAItC,CAEQoE,MAAQ,KACX9D,KAAKR,QAETQ,KAAKgD,WACLhD,KAAKnB,SAAW,EAChBmB,KAAKjB,aAAe,EACpBiB,KAAKlB,cAAgB,EACrBkB,KAAKrB,OAAS,EAEdqB,KAAKwB,gBAGLxB,KAAKY,qBAAqB,CACzB5B,QAAQ,EACRmB,KAAMH,KAAKG,KACXC,KAAMJ,KAAKI,OACTS,MAAKuB,IACPpC,KAAKiB,YACLjB,KAAKwE,aACLxE,KAAKkB,cACLlB,KAAK0B,cAAY,GAClB,EAeO0B,kBAAoB,KACvBpD,KAAKR,QAETQ,KAAKY,qBAAqB,CACzB5B,QAAQ,EACRmB,KAAMH,KAAKG,KACXC,KAAMJ,KAAKI,OACTS,MAAKuB,IACPpC,KAAKrB,OAAS,EACdqB,KAAKiB,YACLjB,KAAKkB,aAAW,GACjB,EAGOb,UAAUT,EAA+BC,GAChD,MAAMoD,EAAgBjD,KAAKgH,eAA4BnH,EAAW,gBAC5DkD,EAAiB/C,KAAKgH,eAA4BnH,EAAW,iBAC7DoH,EAAgBjH,KAAKgH,eAA4BnH,EAAW,gBAC5DqH,EAAsBlH,KAAKgH,eAA4BnH,EAAW,sBAClEsH,EAAkBnH,KAAKgH,eAA4BnH,EAAW,kBAC9DsD,EAAoBnD,KAAKgH,eAA4BnH,EAAW,oBAChEuH,EAAoBpH,KAAKgH,eAA4BzI,SAAU,mBAC/DiF,EAA0BxD,KAAKgH,eAAiCnH,EAAW,2BAC3E8D,EAAsB3D,KAAKgH,eAAiCnH,EAAW,uBACvE0G,EAAqBvG,KAAKgH,eAA4BnH,EAAW,sBACjEgE,EAAiB7D,KAAKgH,eAA4BnH,EAAW,iBAC7DkE,EAAgB/D,KAAKgH,eAA4BnH,EAAW,gBAC5DyC,EAAgBtC,KAAKgH,eAA4BnH,EAAW,gBAC5DuB,EAAqBpB,KAAKgH,eAAiCnH,EAAW,gBACtEyB,EAAqBtB,KAAKgH,eAAiCnH,EAAW,gBACtEwE,EAAiBrE,KAAKgH,eAAiCnH,EAAW,iBAExEG,KAAKmB,MAAQ,CACZvB,WAAYA,EACZC,UAAWA,EACXoD,cAAeA,EACfF,eAAgBA,EAChBkE,cAAeA,EACfC,oBAAqBA,EACrBC,gBAAiBA,EACjBhE,kBAAmBA,EACnBiE,kBAAmBA,EACnB5D,wBAAyBA,EACzBG,oBAAqBA,EACrB4C,mBAAoBA,EACpB1C,eAAgBA,EAChBE,cAAeA,EACfzB,cAAeA,EACflB,mBAAoBA,EACpBE,mBAAoBA,EACpB+C,eAAgBA,EAElB,CAEQ2C,eAA4BK,EAAgCC,GACnE,MAAMC,EAAOF,EAAW7I,cAAc8I,GACtC,GAAa,OAATC,EACH,MAAM,IAAIxK,MAAM,iCAAiCuK,eAElD,OAAOC,CACR,CAGQ3E,cAAgB,KACvB5C,KAAKQ,gBACLR,KAAKiB,WAAS,EAGPR,aAAe,KACtBT,KAAKwH,UAAYC,iBAAiBlJ,SAASmJ,iBAAiBC,iBAAiB,YAGtE7E,oBAAsB,KAC7B9C,KAAKS,eACLT,KAAKiB,WAAS,EAGPT,cAAgB,KACvB,MAAMoH,EAAQ5H,KAAKmB,MAAMiG,kBAAkBS,YACrCC,EAAS9H,KAAKmB,MAAMiG,kBAAkBW,aAEtCC,EAAchI,KAAKI,KAAOJ,KAAKG,KAE/B8H,EAActC,KAAK3J,IAAI4L,EAAOE,EAASE,GACvCE,EAAeD,EAAcD,EAEnChI,KAAK6F,SAAWoC,EAAcjI,KAAKI,KAEnC,MAAM+H,GAAYP,EAAQK,GAAe,EACnCG,GAAYN,EAASI,GAAgB,EAE3ClI,KAAKmB,MAAMvB,WAAWgI,MAAQK,EAC9BjI,KAAKmB,MAAMvB,WAAWkI,OAASI,EAE/BlI,KAAKmB,MAAMiG,kBAAkBiB,MAAMC,QAAU,GAAGF,OAAcD,KAAY,EAoBnEpC,OAAOD,EAAaJ,GAC3B,MAAO,GAAGI,KAAOJ,GAClB,CAEQzE,YACPjB,KAAK4B,OAEL5B,KAAKC,IAAIsI,UAAU,EAAG,EAAGvI,KAAKmB,MAAMvB,WAAWgI,MAAO5H,KAAKmB,MAAMvB,WAAWkI,QAC5E,MAAMjC,EAAW7F,KAAK6F,SAEtB7F,KAAKC,IAAIuI,UAAYxI,KAAKwH,UAE1B,IAAK,IAAI5K,EAAI,EAAGA,EAAIoD,KAAKG,KAAMvD,IAC9B,IAAK,IAAI6L,EAAI,EAAGA,EAAIzI,KAAKI,KAAMqI,IAAK,CACnC,MAAMzD,EAAMhF,KAAK+F,OAAOnJ,EAAG6L,GACvBzI,KAAKc,MAAMmF,IAAIjB,IAClBhF,KAAKC,IAAIyI,SAASD,EAAI5C,EAAUjJ,EAAIiJ,EAAUA,EAAUA,EAE1D,CAGD7F,KAAKqC,cACN,CAkBQsG,wBACP3I,KAAK4B,OAEL5B,KAAKV,OAAOuC,YAAY,CACvB9D,KAAM,cACN+D,QAAS,CAAC,IAwBX,OArBqB,IAAIC,SAAgC,CAAC9D,EAAS+D,KAClEhC,KAAKV,OAAO2C,UAAaC,IACxB,MAAMC,EAAUD,EAAME,KAItB,GAFApC,KAAKqC,eAEgB,wBAAjBF,EAAQpE,KAAgC,CAC3C,MAAMqE,EAA+BD,EAAQC,MACvClD,YAAEA,EAAW4B,MAAEA,EAAKC,OAAEA,GAAWqB,EAEvCpC,KAAKd,YAAcA,EACnBc,KAAKc,MAAQA,EACbd,KAAKe,OAASA,EAEd9C,EAAQmE,EACT,CAEAJ,GAAO,EAAK,CACb,GAIF,CA8BQd,cACPlB,KAAKqG,mBACLrG,KAAK0D,eACL1D,KAAKmB,MAAMgG,gBAAgB7C,YAAcjD,OAAOrB,KAAKrB,QAErDqB,KAAKmB,MAAMqC,wBAAwBoF,QAAU5I,KAAKhB,MACnD,CAEQwF,aACP,IAAI3F,EAAWpD,KAAKC,MAAQsE,KAAKlB,cAAgBkB,KAAKjB,aAC3B,IAAvBiB,KAAKlB,gBAAqBD,EAAW,GACzCmB,KAAKnB,SAAWA,EAEhBmB,KAAKmB,MAAM8F,cAAc3C,aAAetE,KAAKnB,SAAW,KAAM+H,QAAQ,EACvE,CAEQlD,gBACa,IAAhB1D,KAAKhB,OACRgB,KAAKmB,MAAMgC,kBAAkBZ,UAAUC,IAAI,0BAE3CxC,KAAKmB,MAAMgC,kBAAkBZ,UAAUE,OAAO,yBAEhD,CAEQ4D,mBACPrG,KAAKmB,MAAM+F,oBAAoB5C,YAAcjD,OAAOrB,KAAKd,YAC1D,CAEQ8E,SAAW,KAClB,IAAqB,IAAjBhE,KAAKR,QAGT,OAAOQ,KAAK2I,wBACX9H,MAAKuB,IACLpC,KAAKiB,YACLjB,KAAKrB,OAASqB,KAAKrB,OAAS,EAC5BqB,KAAKkB,cACEkB,IACR,EAGOc,YACPlD,KAAKwB,gBACLxB,KAAKpB,QAAS,EACdoB,KAAKlB,cAAgBrD,KAAKC,MAC1BsE,KAAK6I,aAAe1N,EAAgB6E,KAAKgE,SAAUhE,KAAK3E,SAAW2E,KAAKf,OAAS,KACjFe,KAAK8I,gBAAkB3N,EAAgB6E,KAAK+I,wBAC7C,CAEQA,wBAA0B,KACjC/I,KAAKwE,YAAU,EAGTxB,YACc,IAAhBhD,KAAKpB,SACToB,KAAKpB,QAAS,EACdoB,KAAKjB,aAAeiB,KAAKnB,SACzBmK,qBAAqBhJ,KAAK6I,aAAatN,IACvCyN,qBAAqBhJ,KAAK8I,gBAAgBvN,IAC1CyE,KAAK0B,eACN,CAEQoF,kBACP,OAAO5J,KAAKC,MAAM8L,aAAaC,QAAQ,SAAW,KACnD,CAEQzF,gBAAmBuB,EAAa9I,GACvC,MAAM2K,EAAmB7G,KAAK8G,kBAE9BD,EAAiB7B,GAAO9I,EAExB+M,aAAaE,QAAQ,OAAQjM,KAAKS,UAAUkJ,GAC7C,GD5vB2B,CAC3BjH,WAAYtB,EACZwB,YAAa,IACbC,YAAa,IACbF,UAAWpB,EACXO,QAAQ,EACRC,MAAO,EACPE,iBAAiB,EACjBO,aAAa,IAGbgD,OAAe0G,KAAO1K","sources":["youtube-game-of-life/scripts/functions/request-interval.ts","youtube-game-of-life/scripts/functions/restrict-input.ts","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-df57b14d46eeb3dd.js","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-cc42f59012b62c29.js","youtube-game-of-life/scripts/index.ts","youtube-game-of-life/scripts/game-of-life.ts"],"sourcesContent":["export function requestInterval(fn: () => void, interval: number = 0): {id: number} {\n  const obj = {\n    id: 0,\n  };\n  let start = Date.now();\n\n  const animate = () => {\n\t\tif (interval === 0) {\n\t\t\tfn();\n\t\t\tobj.id = requestAnimationFrame(animate);\n\t\t\treturn;\n\t\t}\n\n\n    const now = Date.now();\n    const delta = now - start;\n\n    if (delta >= interval) {\n      fn();\n      start = now - (delta % interval);\n    }\n\n    obj.id = requestAnimationFrame(animate);\n  };\n\n  obj.id = requestAnimationFrame(animate);\n\n  return obj;\n}\n","export function restrictInputValue(input: HTMLInputElement, min: number, max: number) {\n  // input.addEventListener('input', () => {\n  //   let value = parseInt(input.value);\n  //   if (isNaN(value)) {\n  //     value = min;\n  //   } else if (value < min) {\n  //     value = min;\n  //   } else if (value > max) {\n  //     value = max;\n  //   }\n  //   input.value = value.toString();\n  // });\n\n\tlet value = parseInt(input.value);\n\n\tif (isNaN(value)) {\n\t\tvalue = min;\n\t} else if (value < min) {\n\t\tvalue = min;\n\t} else if (value > max) {\n\t\tvalue = max;\n\t}\n\n\tinput.value = value.toString();\n\n\treturn value;\n}\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"8hlSa\\\":\\\"index.5bf3a7b6.js\\\",\\\"1fGk6\\\":\\\"worker-game-of-life-logic.4caa6362.js\\\"}\"));","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1fGk6\"));\nmodule.exports = workerURL(url.toString(), url.origin, true);","import { GameOfLife } from \"./game-of-life\";\n\nconst canvasNode = document.querySelector<HTMLCanvasElement>('.canvas');\nconst popupNode = document.querySelector<HTMLElement>('.popup');\n\nif (canvasNode === null || popupNode === null) {\n\tthrow new Error('canvas не найден');\n}\n\nconst game = new GameOfLife({\n\tcanvasNode: canvasNode,\n\tcellsCountX: 100,\n\tcellsCountY: 100,\n\tpopupNode: popupNode,\n\trandom: false,\n\tspeed: 1,\n\tlocalStorageUse: true,\n\tpopupHidden: false\n});\n\n(window as any).game = game;\n","import { GameOfLifeLocalStorage, GameOfLifeNodes, GameOfLifeParams, GameOfLifeWorkerResult } from \"../interfacesOrTypes\";\nimport { debounce } from \"./functions/debounce\";\nimport { requestInterval } from \"./functions/request-interval\";\nimport { restrictInputValue } from \"./functions/restrict-input\";\n\nexport class GameOfLife {\n\tprivate ctx: CanvasRenderingContext2D;\n\tprivate rows: number;\n\tprivate cols: number;\n\tprivate cellSize: number;\n\tprivate field: Map<string, boolean>;\n\tprivate buffer: Map<string, boolean>;\n\tprivate colorCell: string;\n\tprivate animationObj: { id: number };\n\tprivate nodes: GameOfLifeNodes;\n\tprivate cycles: number = 0;\n\tprivate played: boolean = false;\n\tprivate interval: number = 500;\n\tprivate gameTime: number = 0;\n\tprivate gameStartTime: number = 0;\n\tprivate gameLastTime: number = 0;\n\tprivate random: boolean = false;\n\tprivate speed: number = 0;\n\tprivate activeCells: number = 0;\n\tprivate localStorageUse: boolean = false;\n\tprivate isDragging: boolean = false;\n\tprivate isRealDragging: boolean = false;\n\tprivate animationTimeId: { id: number };\n\tprivate worker: Worker = new Worker(new URL('workers/worker-game-of-life-logic.js', import.meta.url));\n\tprivate loading: boolean = false;\n\tprivate focusedInput: HTMLInputElement | null = null;\n\tprivate popupHidden: boolean = false;\n\n\tconstructor({ canvasNode, popupNode, cellsCountX, cellsCountY, random, speed, localStorageUse, popupHidden }: GameOfLifeParams) {\n\t\tif (speed < 1) {\n\t\t\tthrow new Error('GameOfLife: speed не может быть меньше 1');\n\t\t}\n\t\tif (speed > 10) {\n\t\t\tthrow new Error('GameOfLife: speed не может быть больше 10');\n\t\t}\n\n\t\tthis.ctx = canvasNode.getContext(\"2d\")!;\n\t\tthis.rows = cellsCountX;\n\t\tthis.cols = cellsCountY;\n\t\tthis.random = random;\n\t\tthis.speed = speed;\n\t\tthis.localStorageUse = localStorageUse;\n\t\tthis.popupHidden = popupHidden;\n\n\t\tthis.initNodes(canvasNode, popupNode);\n\t\tif (this.localStorageUse) this.useLocalStorage();\n\t\tthis.initCalcSpeed();\n\t\tthis.setCanvasSize();\n\t\tthis.setColorCell();\n\t\tthis.initInputNodes();\n\t\tthis.initPopupHidden();\n\n\t\tthis.sendWorkerInitFields({\n\t\t\trandom: this.random,\n\t\t\trows: this.rows,\n\t\t\tcols: this.cols\n\t\t})\n\t\t.then(({ activeCells, field, buffer }) => {\n\t\t\tthis.initEventListeners();\n\t\t\tthis.drawField();\n\t\t\tthis.renderPopup();\n\t\t});\n\t\t// this.initFields();\n\t}\n\n\tprivate initInputNodes(): void {\n\t\tthis.nodes.popupInputRowsNode.value = String(this.rows);\n\t\tthis.nodes.popupInputColsNode.value = String(this.cols);\n\t}\n\n\tprivate initPopupHidden(): void {\n\t\tthis.togglePopup(this.popupHidden);\n\t}\n\n\tprivate disableInputs(): void {\n\t\tthis.nodes.popupInputRowsNode.disabled = true;\n\t\tthis.nodes.popupInputColsNode.disabled = true;\n\t}\n\n\tprivate enableInputs(): void {\n\t\tthis.nodes.popupInputRowsNode.disabled = false;\n\t\tthis.nodes.popupInputColsNode.disabled = false;\n\n\t\tif (this.focusedInput !== null) {\n\t\t\tthis.focusedInput.focus();\n\t\t\tthis.focusedInput = null;\n\t\t}\n\t}\n\n\tprivate sendWorkerInitFields({\n\t\trandom, rows, cols\n\t}: { random: boolean; rows: number; cols: number }): Promise<GameOfLifeWorkerResult> {\n\n\t\tthis.load();\n\t\tthis.disableInputs();\n\n\t\tthis.worker.postMessage({\n\t\t\ttype: 'initFields',\n\t\t\tpayload: {\n\t\t\t\trandom: random,\n\t\t\t\trows: rows,\n\t\t\t\tcols: cols\n\t\t\t}\n\t\t});\n\n\t\tconst resultWorker = new Promise<GameOfLifeWorkerResult>((resolve, reject) => {\n\t\t\tthis.worker.onmessage = (event) => {\n\t\t\t\tconst message = event.data;\n\n\t\t\t\tthis.loadComplete();\n\t\t\t\tthis.enableInputs();\n\n\t\t\t\tif (message.type === 'result: initFields') {\n\t\t\t\t\tconst data: GameOfLifeWorkerResult = message.data;\n\t\t\t\t\tconst { activeCells, field, buffer } = data;\n\n\t\t\t\t\tthis.activeCells = activeCells;\n\t\t\t\t\tthis.field = field;\n\t\t\t\t\tthis.buffer = buffer;\n\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\n\t\t\t\treject(false);\n\t\t\t};\n\t\t});\n\n\t\treturn resultWorker;\n\t}\n\n\tprivate load(): void {\n\t\tthis.loading = true;\n\t\tthis.nodes.popupLoadNode.classList.add('popup__load_active');\n\t\tthis.nodes.popupNode.classList.add('popup_load');\n\t}\n\n\tprivate loadComplete(): void {\n\t\tthis.loading = false;\n\t\tthis.nodes.popupLoadNode.classList.remove('popup__load_active');\n\t\tthis.nodes.popupNode.classList.remove('popup_load');\n\t}\n\n\tprivate initEventListeners(): void {\n\t\twindow.addEventListener('resize', this.resizeAndDraw);\n\t\tconst matchMediaDark = window.matchMedia('(prefers-color-scheme: dark)');\n\n\t\tmatchMediaDark.addEventListener('change', this.setColorCellAndDraw);\n\n\t\tthis.nodes.popupPauseNode.addEventListener('click', () => {\n\t\t\tif (this.played === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.stopGame();\n\t\t});\n\n\t\tthis.nodes.popupPlayNode.addEventListener('click', () => {\n\t\t\tif (this.played === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.startGame();\n\t\t});\n\n\t\t// this.nodes.popupRestartNode.addEventListener('click', this.reStart);\n\t\tthis.nodes.popupGenerateNode.addEventListener('click', this.generateNewFields);\n\n\t\tthis.nodes.canvasNode.addEventListener('pointerdown', (event) => {\n\t\t\tif (this.loading === true) return;\n\t\t\tif (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\n\t\t\tthis.isDragging = true;\n\t\t\tthis.isRealDragging = false;\n\t\t});\n\n\t\tthis.nodes.canvasNode.addEventListener('pointermove', (event) => {\n\t\t\tif (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\n\t\t\tif (this.isDragging === true && this.loading === false) {\n\t\t\t\tthis.isRealDragging = true;\n\t\t\t\tthis.generateCellByClick(event, true)\n\t\t\t};\n\t\t});\n\n\t\tdocument.addEventListener('pointerup', (event) => {\n\t\t\tif (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\n\t\t\tconst clickOnPopupBool = this.isClickOnElement(event, this.nodes.popupNode);\n\t\t\tif (clickOnPopupBool === true) return;\n\t\t\tif (this.isRealDragging === false && this.loading === false) this.generateCellByClick(event, false);\n\n\t\t\tthis.isDragging = false;\n\t\t\tthis.isRealDragging = false;\n\t\t});\n\n\t\tthis.nodes.popupRandomCheckboxNode.addEventListener('input', () => {\n\t\t\tthis.random = !this.random;\n\t\t\tif (this.localStorageUse) this.setLocalStorage('random', this.random);\n\t\t\tthis.renderRandom();\n\t\t});\n\n\t\tthis.nodes.popupSpeedRangeNode.addEventListener('input', this.calcSpeedInputChange);\n\t\tthis.nodes.popupClearNode.addEventListener('click', this.clear);\n\n\t\tthis.nodes.popupStepNode.addEventListener('click', () => {\n\t\t\tthis.disableInputs();\n\t\t\tthis.stepGame()?.then(data => {\n\t\t\t\tthis.enableInputs();\n\t\t\t});\n\t\t});\n\n\t\tthis.nodes.popupInputRowsNode.addEventListener('input', () => {\n\t\t\tconst newRows = restrictInputValue(this.nodes.popupInputRowsNode, 0, 2000);\n\t\t\tif (this.localStorageUse) this.setLocalStorage('rows', newRows);\n\n\t\t\tthis.focusedInput = this.nodes.popupInputRowsNode;\n\t\t\tthis.resizeFieldRows(newRows);\n\t\t});\n\n\t\tthis.nodes.popupInputColsNode.addEventListener('input', () => {\n\t\t\tconst newCols = restrictInputValue(this.nodes.popupInputColsNode, 0, 2000);\n\t\t\tif (this.localStorageUse) this.setLocalStorage('cols', newCols);\n\n\t\t\tthis.focusedInput = this.nodes.popupInputColsNode;\n\t\t\tthis.resizeFieldCols(newCols);\n\t\t});\n\n\t\tthis.nodes.popupCloseNode.addEventListener('click', () => {\n\t\t\tthis.popupHidden = !this.popupHidden;\n\t\t\tthis.togglePopup(this.popupHidden);\n\t\t});\n\t}\n\n\tprivate togglePopup = (popupHidden: boolean): void => {\n\t\tif (this.localStorageUse === true) this.setLocalStorage('popupHidden', this.popupHidden);\n\n\t\tif (this.popupHidden === true) {\n\t\t\tthis.nodes.popupNode.classList.add('popup_hidden');\n\t\t\tthis.nodes.popupCloseNode.textContent = 'Открыть';\n\t\t} else {\n\t\t\tthis.nodes.popupNode.classList.remove('popup_hidden');\n\t\t\tthis.nodes.popupCloseNode.textContent = 'Скрыть';\n\t\t}\n\t}\n\n\tprivate resizeFieldRows(newRows: number): void {\n\t\tif (this.loading === true) return;\n\n\t\tthis.sendWorkerResizeField(newRows, this.cols, this.random)\n\t\t.then((data) => {\n\t\t\tthis.setCanvasSize();\n\t\t\tthis.drawField();\n\t\t\tthis.renderTime();\n\t\t\tthis.renderPopup();\n\t\t});\n\t}\n\n\tprivate resizeFieldCols(newCols: number): void {\n\t\tif (this.loading === true) return;\n\n\t\tthis.sendWorkerResizeField(this.rows, newCols, this.random)\n\t\t.then((data) => {\n\t\t\tthis.setCanvasSize();\n\t\t\tthis.drawField();\n\t\t\tthis.renderTime();\n\t\t\tthis.renderPopup();\n\t\t});\n\t}\n\n\tprivate sendWorkerResizeField(newRows: number, newCols: number, random: boolean): Promise<void | GameOfLifeWorkerResult> {\n\t\tthis.load();\n\t\tthis.disableInputs();\n\n\t\tthis.worker.postMessage({\n\t\t\ttype: 'resizeField',\n\t\t\tpayload: {\n\t\t\t\tnewRows: newRows,\n\t\t\t\tnewCols: newCols,\n\t\t\t\trandom: random\n\t\t\t}\n\t\t});\n\n\t\tconst resultWorker = new Promise<GameOfLifeWorkerResult>((resolve, reject) => {\n\t\t\tthis.worker.onmessage = (event) => {\n\t\t\t\tconst message = event.data;\n\n\t\t\t\tthis.loadComplete();\n\t\t\t\tthis.enableInputs();\n\n\n\t\t\t\tif (message.type === 'result: resizeField') {\n\t\t\t\t\tconst data: GameOfLifeWorkerResult = message.data;\n\t\t\t\t\tconst { field, buffer, activeCells, rows, cols } = data;\n\n\t\t\t\t\tthis.field = field;\n\t\t\t\t\tthis.buffer = buffer;\n\t\t\t\t\tthis.activeCells = activeCells;\n\t\t\t\t\tthis.rows = rows;\n\t\t\t\t\tthis.cols = cols;\n\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\n\t\t\t\treject(false);\n\t\t\t};\n\t\t}).catch(() => {});\n\n\t\treturn resultWorker;\n\t}\n\n\tprivate isClickOnElement(event: MouseEvent, element: Element): boolean {\n\t\tconst target = event.target as Element; // Получаем целевой элемент клика\n\n\t\t// Проверяем, является ли целевой элемент или его родительские элементы равным заданному элементу\n\t\tlet currentNode: Element | null = target;\n\t\twhile (currentNode != null) {\n\t\t\tif (currentNode === element) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcurrentNode = currentNode.parentElement;\n\t\t}\n\n\t\t// Если не было найдено совпадений, возвращаем false\n\t\treturn false;\n\t}\n\n\tprivate sendWorkerDeleteOrCreateCell(typeAction: 'delete' | 'create', key: string): Promise<GameOfLifeWorkerResult> {\n\t\tthis.load();\n\n\t\tthis.worker.postMessage({\n\t\t\ttype: 'deleteOrCreateCell',\n\t\t\tpayload: {\n\t\t\t\ttypeAction: typeAction,\n\t\t\t\tkey: key\n\t\t\t}\n\t\t});\n\n\t\tconst resultWorker = new Promise<GameOfLifeWorkerResult>((resolve, reject) => {\n\t\t\tthis.worker.onmessage = (event) => {\n\t\t\t\tconst message = event.data;\n\n\t\t\t\tthis.loadComplete();\n\n\t\t\t\tif (message.type === 'result: deleteOrCreateCell') {\n\t\t\t\t\tconst data: GameOfLifeWorkerResult = message.data;\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\n\t\t\t\treject(false);\n\t\t\t};\n\t\t});\n\n\t\treturn resultWorker;\n\t}\n\n\tprivate generateCellByClick = (event: MouseEvent, moved: boolean = false): void => {\n\t\tif (this.played === true) {\n\t\t\treturn;\n\t\t}\n\t\tconst rect = this.nodes.canvasNode.getBoundingClientRect();\n\t\tconst x = event.clientX - rect.left;\n\t\tconst y = event.clientY - rect.top;\n\t\tconst col = Math.floor(x / this.cellSize);\n\t\tconst row = Math.floor(y / this.cellSize);\n\t\tconst key = this.getKey(row, col);\n\n\t\tconst isCellAlive = this.field.get(key);\n\n\t\tconst deleteCell = () => {\n\t\t\tthis.activeCells--;\n\t\t\tthis.field.set(key, false);\n\t\t\tthis.sendWorkerDeleteOrCreateCell('delete', key).then();\n\t\t};\n\n\t\tconst createCell = () => {\n\t\t\tthis.activeCells++;\n\t\t\tthis.field.set(key, true);\n\t\t\tthis.sendWorkerDeleteOrCreateCell('create', key).then();\n\t\t}\n\n\t\tif (isCellAlive === false && moved === true) {\n\t\t\tcreateCell();\n\t\t} else if (isCellAlive === false && moved === false) {\n\t\t\tcreateCell();\n\t\t} else if (isCellAlive === true && moved === false) {\n\t\t\tdeleteCell();\n\t\t}\n\n\t\tthis.renderPopulation();\n\t\tthis.drawField();\n\t}\n\n\tprivate initCalcSpeed(): void {\n\t\tconst max = Number(this.nodes.popupSpeedRangeNode.max);\n\t\tconst min = Number(this.nodes.popupSpeedRangeNode.min);\n\n\t\tconst speedPercent = (this.speed - 1) / 9;\n\t\tconst value = min + (speedPercent * (max - min));\n\n\t\tthis.nodes.popupSpeedRangeNode.value = String(value);\n\t\tthis.nodes.popupSpeedInfoNode.textContent = String(this.speed);\n\t}\n\n\tprivate calcSpeedInputChange = (): void => {\n\t\tconst lastGameState = this.played;\n\t\tthis.stopGame();\n\n\t\tconst currentVal = this.nodes.popupSpeedRangeNode.valueAsNumber;\n\t\tconst max = Number(this.nodes.popupSpeedRangeNode.max);\n\t\tconst min = Number(this.nodes.popupSpeedRangeNode.min);\n\n\t\tconst end = max - min;\n\t\tconst currentValMod = currentVal - min;\n\n\t\tconst currentValPercent = currentValMod / end;\n\t\tconst newSpeed = Number(((currentValPercent * 9) + 1).toFixed(1));\n\t\tthis.speed = newSpeed;\n\n\t\tthis.nodes.popupSpeedInfoNode.textContent = String(this.speed);\n\n\t\tif (this.localStorageUse) this.setLocalStorage('speed', this.speed);\n\n\t\tif (lastGameState === true) this.startGame();\n\t}\n\n\tprivate useLocalStorage(): void {\n\t\tconst lastLocalStorage = this.getLocalStorage();\n\n\t\tif (lastLocalStorage.random !== undefined) {\n\t\t\tthis.random = lastLocalStorage.random;\n\t\t}\n\n\t\tif (lastLocalStorage.speed !== undefined) {\n\t\t\tthis.speed = lastLocalStorage.speed;\n\t\t}\n\n\t\tif (lastLocalStorage.rows !== undefined) {\n\t\t\tthis.rows = lastLocalStorage.rows;\n\t\t}\n\n\t\tif (lastLocalStorage.cols !== undefined) {\n\t\t\tthis.cols = lastLocalStorage.cols;\n\t\t}\n\n\t\tif (lastLocalStorage.popupHidden !== undefined) {\n\t\t\tthis.popupHidden = lastLocalStorage.popupHidden;\n\t\t}\n\n\t\t// this.setLocalStorage('popup-hidden', this.popupHidden);\n\t}\n\n\tprivate clear = (): void => {\n\t\tif (this.loading === true) false;\n\n\t\tthis.stopGame();\n\t\tthis.gameTime = 0;\n\t\tthis.gameLastTime = 0;\n\t\tthis.gameStartTime = 0;\n\t\tthis.cycles = 0;\n\n\t\tthis.disableInputs();\n\t\t// this.initFields(false);\n\n\t\tthis.sendWorkerInitFields({\n\t\t\trandom: false,\n\t\t\trows: this.rows,\n\t\t\tcols: this.cols\n\t\t}).then(data => {\n\t\t\tthis.drawField();\n\t\t\tthis.renderTime();\n\t\t\tthis.renderPopup();\n\t\t\tthis.enableInputs();\n\t\t});\n\t}\n\n\t// private reStart = (): void => {\n\t// \tthis.stopGame();\n\t// this.gameTime = 0;\n\t// this.gameLastTime = 0;\n\t// this.gameStartTime = 0;\n\t// this.cycles = 0;\n\t// \tthis.initFields();\n\t// \tthis.drawField();\n\t// \tthis.renderPopup();\n\t// \tthis.startGame();\n\t// }\n\n\tprivate generateNewFields = (): void => {\n\t\tif (this.loading === true) false;\n\t\t// this.initFields(true);\n\t\tthis.sendWorkerInitFields({\n\t\t\trandom: true,\n\t\t\trows: this.rows,\n\t\t\tcols: this.cols\n\t\t}).then(data => {\n\t\t\tthis.cycles = 0;\n\t\t\tthis.drawField();\n\t\t\tthis.renderPopup();\n\t\t});\n\t}\n\n\tprivate initNodes(canvasNode: HTMLCanvasElement, popupNode: HTMLElement): void {\n\t\tconst popupPlayNode = this._querySelector<HTMLElement>(popupNode, '.popup__play');\n\t\tconst popupPauseNode = this._querySelector<HTMLElement>(popupNode, '.popup__pause');\n\t\tconst popupTimeNode = this._querySelector<HTMLElement>(popupNode, '.popup__time');\n\t\tconst popupPopulationNode = this._querySelector<HTMLElement>(popupNode, '.popup__population');\n\t\tconst popupCyclesNode = this._querySelector<HTMLElement>(popupNode, '.popup__cycles');\n\t\tconst popupGenerateNode = this._querySelector<HTMLElement>(popupNode, '.popup__generate');\n\t\tconst wrapperCanvasNode = this._querySelector<HTMLElement>(document, '.wrapper-canvas');\n\t\tconst popupRandomCheckboxNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__random-checkbox');\n\t\tconst popupSpeedRangeNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__speed-range');\n\t\tconst popupSpeedInfoNode = this._querySelector<HTMLElement>(popupNode, '.popup__speed-info');\n\t\tconst popupClearNode = this._querySelector<HTMLElement>(popupNode, '.popup__clear');\n\t\tconst popupStepNode = this._querySelector<HTMLElement>(popupNode, '.popup__step');\n\t\tconst popupLoadNode = this._querySelector<HTMLElement>(popupNode, '.popup__load');\n\t\tconst popupInputRowsNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__rows');\n\t\tconst popupInputColsNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__cols');\n\t\tconst popupCloseNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__close');\n\n\t\tthis.nodes = {\n\t\t\tcanvasNode: canvasNode,\n\t\t\tpopupNode: popupNode,\n\t\t\tpopupPlayNode: popupPlayNode,\n\t\t\tpopupPauseNode: popupPauseNode,\n\t\t\tpopupTimeNode: popupTimeNode,\n\t\t\tpopupPopulationNode: popupPopulationNode,\n\t\t\tpopupCyclesNode: popupCyclesNode,\n\t\t\tpopupGenerateNode: popupGenerateNode,\n\t\t\twrapperCanvasNode: wrapperCanvasNode,\n\t\t\tpopupRandomCheckboxNode: popupRandomCheckboxNode,\n\t\t\tpopupSpeedRangeNode: popupSpeedRangeNode,\n\t\t\tpopupSpeedInfoNode: popupSpeedInfoNode,\n\t\t\tpopupClearNode: popupClearNode,\n\t\t\tpopupStepNode: popupStepNode,\n\t\t\tpopupLoadNode: popupLoadNode,\n\t\t\tpopupInputRowsNode: popupInputRowsNode,\n\t\t\tpopupInputColsNode: popupInputColsNode,\n\t\t\tpopupCloseNode: popupCloseNode\n\t\t}\n\t}\n\n\tprivate _querySelector<T = Element>(parentNode: Element | Document, selector: string): T {\n\t\tconst node = parentNode.querySelector(selector);\n\t\tif (node === null) {\n\t\t\tthrow new Error(`GameOfLife: элемент с классом ${selector} не найден`);\n\t\t}\n\t\treturn node as T;\n\t}\n\n\n\tprivate resizeAndDraw = (): void => {\n\t\tthis.setCanvasSize();\n\t\tthis.drawField();\n\t}\n\n\tprivate setColorCell = (): void => {\n\t\tthis.colorCell = getComputedStyle(document.documentElement).getPropertyValue('--color');\n\t}\n\n\tprivate setColorCellAndDraw = (): void => {\n\t\tthis.setColorCell();\n\t\tthis.drawField();\n\t}\n\n\tprivate setCanvasSize = (): void => {\n\t\tconst width = this.nodes.wrapperCanvasNode.offsetWidth;\n\t\tconst height = this.nodes.wrapperCanvasNode.offsetHeight;\n\n\t\tconst aspectRatio = this.cols / this.rows;\n\n\t\tconst canvasWidth = Math.min(width, height * aspectRatio);\n\t\tconst canvasHeight = canvasWidth / aspectRatio;\n\n\t\tthis.cellSize = canvasWidth / this.cols;\n\n\t\tconst xPadding = (width - canvasWidth) / 2;\n\t\tconst yPadding = (height - canvasHeight) / 2;\n\n\t\tthis.nodes.canvasNode.width = canvasWidth;\n\t\tthis.nodes.canvasNode.height = canvasHeight;\n\n\t\tthis.nodes.wrapperCanvasNode.style.padding = `${yPadding}px ${xPadding}px`;\n\t}\n\n\t// private initFields(random = this.random): void {\n\t// \tthis.field = new Map<string, boolean>();\n\t// \tthis.buffer = new Map<string, boolean>();\n\n\t// \tthis.activeCells = 0;\n\n\t// \tfor (let i = 0; i < this.rows; i++) {\n\t// \t\tfor (let j = 0; j < this.cols; j++) {\n\t// \t\t\tconst key = this.getKey(i, j);\n\t// \t\t\tconst fieldVal = Math.round(Math.random()) === 1;\n\t// \t\t\tconst val = random === true ? fieldVal : false;\n\t// \t\t\tif (val === true) this.activeCells++;\n\t// \t\t\tthis.field.set(key, val);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate getKey(row: number, col: number): string {\n\t\treturn `${row}-${col}`;\n\t}\n\n\tprivate drawField(): void {\n\t\tthis.load();\n\n\t\tthis.ctx.clearRect(0, 0, this.nodes.canvasNode.width, this.nodes.canvasNode.height);\n\t\tconst cellSize = this.cellSize;\n\n\t\tthis.ctx.fillStyle = this.colorCell;\n\n\t\tfor (let i = 0; i < this.rows; i++) {\n\t\t\tfor (let j = 0; j < this.cols; j++) {\n\t\t\t\tconst key = this.getKey(i, j);\n\t\t\t\tif (this.field.get(key)) {\n\t\t\t\t\tthis.ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.loadComplete();\n\t}\n\n\t// private countNeighbours(row: number, col: number): number {\n\t// \tlet count = 0;\n\n\t// \tfor (let i = -1; i <= 1; i++) {\n\t// \t\tfor (let j = -1; j <= 1; j++) {\n\t// \t\t\tif (i === 0 && j === 0) continue;\n\t// \t\t\tconst r = row + i;\n\t// \t\t\tconst c = col + j;\n\t// \t\t\tconst key = this.getKey(r, c);\n\t// \t\t\tif (this.field.get(key)) count++;\n\t// \t\t}\n\t// \t}\n\n\t// \treturn count;\n\t// }\n\n\tprivate sendWorkerUpdateField(): Promise<GameOfLifeWorkerResult> {\n\t\tthis.load();\n\n\t\tthis.worker.postMessage({\n\t\t\ttype: 'updateField',\n\t\t\tpayload: {}\n\t\t});\n\n\t\tconst resultWorker = new Promise<GameOfLifeWorkerResult>((resolve, reject) => {\n\t\t\tthis.worker.onmessage = (event) => {\n\t\t\t\tconst message = event.data;\n\n\t\t\t\tthis.loadComplete();\n\n\t\t\t\tif (message.type === 'result: updateField') {\n\t\t\t\t\tconst data: GameOfLifeWorkerResult = message.data;\n\t\t\t\t\tconst { activeCells, field, buffer } = data;\n\n\t\t\t\t\tthis.activeCells = activeCells;\n\t\t\t\t\tthis.field = field;\n\t\t\t\t\tthis.buffer = buffer;\n\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\n\t\t\t\treject(false);\n\t\t\t};\n\t\t});\n\n\t\treturn resultWorker;\n\t}\n\n\t// private updateField(): void {\n\t// \tthis.activeCells = 0;\n\n\t// \tfor (let i = 0; i < this.rows; i++) {\n\t// \t\tfor (let j = 0; j < this.cols; j++) {\n\t// \t\t\tconst neighbours = this.countNeighbours(i, j);\n\t// \t\t\tconst key = this.getKey(i, j);\n\t// \t\t\tif (this.field.get(key)) {\n\t// \t\t\t\tif (neighbours < 2 || neighbours > 3) {\n\t// \t\t\t\t\tthis.buffer.set(key, false);\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tthis.activeCells++;\n\t// \t\t\t\t\tthis.buffer.set(key, true);\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tif (neighbours === 3) {\n\t// \t\t\t\t\tthis.activeCells++;\n\t// \t\t\t\t\tthis.buffer.set(key, true);\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tthis.buffer.set(key, false);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \t[this.field, this.buffer] = [this.buffer, this.field];\n\t// }\n\n\tprivate renderPopup(): void {\n\t\tthis.renderPopulation();\n\t\tthis.renderRandom();\n\t\tthis.nodes.popupCyclesNode.textContent = String(this.cycles);\n\t\t// this.nodes.popupTimeNode.textContent = (this.gameTime / 1000).toFixed(1);\n\t\tthis.nodes.popupRandomCheckboxNode.checked = this.random;\n\t}\n\n\tprivate renderTime(): void {\n\t\tlet gameTime = Date.now() - this.gameStartTime + this.gameLastTime;\n\t\tif (this.gameStartTime === 0) gameTime = 0;\n\t\tthis.gameTime = gameTime;\n\n\t\tthis.nodes.popupTimeNode.textContent = (this.gameTime / 1000).toFixed(1);\n\t}\n\n\tprivate renderRandom(): void {\n\t\tif (this.random === true) {\n\t\t\tthis.nodes.popupGenerateNode.classList.add('popup__generate_active');\n\t\t} else {\n\t\t\tthis.nodes.popupGenerateNode.classList.remove('popup__generate_active');\n\t\t}\n\t}\n\n\tprivate renderPopulation(): void {\n\t\tthis.nodes.popupPopulationNode.textContent = String(this.activeCells);\n\t}\n\n\tprivate stepGame = (): Promise<GameOfLifeWorkerResult> | undefined => {\n\t\tif (this.loading === true) return;\n\t\t// this.updateField();\n\n\t\treturn this.sendWorkerUpdateField()\n\t\t.then(data => {\n\t\t\tthis.drawField();\n\t\t\tthis.cycles = this.cycles + 1;\n\t\t\tthis.renderPopup();\n\t\t\treturn data;\n\t\t});\n\t}\n\n\tprivate startGame(): void {\n\t\tthis.disableInputs();\n\t\tthis.played = true;\n\t\tthis.gameStartTime = Date.now();\n\t\tthis.animationObj = requestInterval(this.stepGame, this.interval / this.speed ** 1.5);\n\t\tthis.animationTimeId = requestInterval(this.stepAnimationRenderTime);\n\t}\n\n\tprivate stepAnimationRenderTime = () => {\n\t\tthis.renderTime();\n\t}\n\n\tpublic stopGame(): void {\n\t\tif (this.played === false) return;\n\t\tthis.played = false;\n\t\tthis.gameLastTime = this.gameTime;\n\t\tcancelAnimationFrame(this.animationObj.id);\n\t\tcancelAnimationFrame(this.animationTimeId.id);\n\t\tthis.enableInputs();\n\t}\n\n\tprivate getLocalStorage(): GameOfLifeLocalStorage {\n\t\treturn JSON.parse(localStorage.getItem('life') || '{}');\n\t}\n\n\tprivate setLocalStorage<T>(key: string, value: T): void {\n\t\tconst lastLocalStorage = this.getLocalStorage();\n\n\t\tlastLocalStorage[key] = value;\n\n\t\tlocalStorage.setItem('life', JSON.stringify(lastLocalStorage));\n\t}\n\n}\n\n\n"],"names":["$87afda71657bed17$export$281c8d11e819ea94","fn","interval","obj","id","start","Date","now","animate","requestAnimationFrame","delta","$7e78a89954828674$export$7913c0f032ea53bb","input","min","max","value","parseInt","isNaN","toString","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","resolved","Error","parcelRequire","register","JSON","parse","$56b621a6dd25b2cb$exports","workerUrl","origin","isESM","self","location","source","stringify","URL","createObjectURL","Blob","type","$656324c799f475a7$var$url","resolve","import","meta","url","$656324c799f475a7$exports","$0958c99caf7bf88d$var$canvasNode","document","querySelector","$0958c99caf7bf88d$var$popupNode","$0958c99caf7bf88d$var$game","cycles","played","gameTime","gameStartTime","gameLastTime","random","speed","activeCells","localStorageUse","isDragging","isRealDragging","worker","Worker","loading","focusedInput","popupHidden","constructor","canvasNode","popupNode","cellsCountX","cellsCountY","this","ctx","getContext","rows","cols","initNodes","useLocalStorage","initCalcSpeed","setCanvasSize","setColorCell","initInputNodes","initPopupHidden","sendWorkerInitFields","then","field","buffer","initEventListeners","drawField","renderPopup","nodes","popupInputRowsNode","String","popupInputColsNode","togglePopup","disableInputs","disabled","enableInputs","focus","load","postMessage","payload","Promise","reject","onmessage","event","message","data","loadComplete","popupLoadNode","classList","add","remove","window","addEventListener","resizeAndDraw","matchMedia","setColorCellAndDraw","popupPauseNode","stopGame","popupPlayNode","startGame","popupGenerateNode","generateNewFields","button","generateCellByClick","isClickOnElement","popupRandomCheckboxNode","setLocalStorage","renderRandom","popupSpeedRangeNode","calcSpeedInputChange","popupClearNode","clear","popupStepNode","stepGame","newRows","resizeFieldRows","newCols","resizeFieldCols","popupCloseNode","textContent","sendWorkerResizeField","renderTime","catch","element","currentNode","target","parentElement","sendWorkerDeleteOrCreateCell","typeAction","key","moved","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","col","Math","floor","cellSize","row","getKey","isCellAlive","get","createCell","set","deleteCell","renderPopulation","Number","popupSpeedInfoNode","lastGameState","currentVal","valueAsNumber","newSpeed","toFixed","lastLocalStorage","getLocalStorage","undefined","_querySelector","popupTimeNode","popupPopulationNode","popupCyclesNode","wrapperCanvasNode","parentNode","selector","node","colorCell","getComputedStyle","documentElement","getPropertyValue","width","offsetWidth","height","offsetHeight","aspectRatio","canvasWidth","canvasHeight","xPadding","yPadding","style","padding","clearRect","fillStyle","j","fillRect","sendWorkerUpdateField","checked","animationObj","animationTimeId","stepAnimationRenderTime","cancelAnimationFrame","localStorage","getItem","setItem","game"],"version":3,"file":"index.5bf3a7b6.js.map"}