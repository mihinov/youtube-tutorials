{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-85691a608c4b253b.js","youtube-game-of-life/only-ts/scripts/index.ts","youtube-game-of-life/only-ts/scripts/game-of-life.ts","youtube-game-of-life/only-ts/scripts/functions/request-interval.ts","youtube-game-of-life/only-ts/scripts/functions/restrict-input.ts","node_modules/@parcel/runtime-js/lib/runtime-7074d800bd0a0a33.js","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $557af60d879bd85c$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse(\"[\\\"kAqiv\\\",\\\"index.f8b64d33.js\\\",\\\"3aufl\\\",\\\"worker-game-of-life-logic.46d3668d.js\\\"]\"));\n\nfunction $20713660892d2e93$export$281c8d11e819ea94(fn, interval = 0) {\n    const obj = {\n        id: 0\n    };\n    let start = Date.now();\n    const animate = ()=>{\n        if (interval === 0) {\n            fn();\n            obj.id = requestAnimationFrame(animate);\n            return;\n        }\n        const now = Date.now();\n        const delta = now - start;\n        if (delta >= interval) {\n            fn();\n            start = now - delta % interval;\n        }\n        obj.id = requestAnimationFrame(animate);\n    };\n    obj.id = requestAnimationFrame(animate);\n    return obj;\n}\n\n\nfunction $d7cbbf251e962942$export$7913c0f032ea53bb(input, min, max) {\n    let value = parseInt(input.value);\n    if (isNaN(value)) value = min;\n    else if (value < min) value = min;\n    else if (value > max) value = max;\n    input.value = value.toString();\n    return value;\n}\n\n\nvar $059802d1429a4f6f$exports = {};\nvar $56b621a6dd25b2cb$exports = {};\n\"use strict\";\n$56b621a6dd25b2cb$exports = function(workerUrl, origin, isESM) {\n    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n    else {\n        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n        var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n        return URL.createObjectURL(new Blob([\n            source\n        ], {\n            type: 'application/javascript'\n        }));\n    }\n};\n\n\nlet $059802d1429a4f6f$var$url = new URL(\"worker-game-of-life-logic.46d3668d.js\", import.meta.url);\n$059802d1429a4f6f$exports = $56b621a6dd25b2cb$exports($059802d1429a4f6f$var$url.toString(), $059802d1429a4f6f$var$url.origin, true);\n\n\nclass $e2b0766be83c46e4$export$8981e2cb2c3fa123 {\n    constructor({ injectedNode: injectedNode, cellsCountX: cellsCountX, cellsCountY: cellsCountY, random: random, speed: speed, localStorageUse: localStorageUse, popupHidden: popupHidden }){\n        this.cycles = 0;\n        this.played = false;\n        this.interval = 500;\n        this.gameTime = 0;\n        this.gameStartTime = 0;\n        this.gameLastTime = 0;\n        this.random = false;\n        this.speed = 0;\n        this.activeCells = 0;\n        this.localStorageUse = false;\n        this.isDragging = false;\n        this.isRealDragging = false;\n        this.worker = new Worker($059802d1429a4f6f$exports);\n        this.loading = false;\n        this.focusedInput = null;\n        this.popupHidden = false;\n        this.togglePopup = (popupHidden)=>{\n            if (this.localStorageUse === true) this.setLocalStorage('popupHidden', this.popupHidden);\n            if (this.popupHidden === true) {\n                this.nodes.popupNode.classList.add('popup_hidden');\n                this.nodes.popupCloseNode.textContent = \"\\u041E\\u0442\\u043A\\u0440\\u044B\\u0442\\u044C\";\n            } else {\n                this.nodes.popupNode.classList.remove('popup_hidden');\n                this.nodes.popupCloseNode.textContent = \"\\u0421\\u043A\\u0440\\u044B\\u0442\\u044C\";\n            }\n        };\n        this.generateCellByClick = (event, moved = false)=>{\n            if (this.played === true) return;\n            const rect = this.nodes.canvasNode.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const col = Math.floor(x / this.cellSize);\n            const row = Math.floor(y / this.cellSize);\n            const key = this.getKey(row, col);\n            const isCellAlive = this.field.get(key);\n            const deleteCell = ()=>{\n                this.activeCells--;\n                this.field.set(key, false);\n                this.sendWorkerDeleteOrCreateCell('delete', key).then();\n            };\n            const createCell = ()=>{\n                this.activeCells++;\n                this.field.set(key, true);\n                this.sendWorkerDeleteOrCreateCell('create', key).then();\n            };\n            if (isCellAlive === false && moved === true) createCell();\n            else if (isCellAlive === false && moved === false) createCell();\n            else if (isCellAlive === true && moved === false) deleteCell();\n            this.renderPopulation();\n            this.drawField();\n        };\n        this.calcSpeedInputChange = ()=>{\n            const lastGameState = this.played;\n            this.stopGame();\n            const currentVal = this.nodes.popupSpeedRangeNode.valueAsNumber;\n            const max = Number(this.nodes.popupSpeedRangeNode.max);\n            const min = Number(this.nodes.popupSpeedRangeNode.min);\n            const end = max - min;\n            const currentValMod = currentVal - min;\n            const currentValPercent = currentValMod / end;\n            const newSpeed = Number((currentValPercent * 9 + 1).toFixed(1));\n            this.speed = newSpeed;\n            this.nodes.popupSpeedInfoNode.textContent = String(this.speed);\n            if (this.localStorageUse) this.setLocalStorage('speed', this.speed);\n            if (lastGameState === true) this.startGame();\n        };\n        this.clear = ()=>{\n            this.loading;\n            this.stopGame();\n            this.gameTime = 0;\n            this.gameLastTime = 0;\n            this.gameStartTime = 0;\n            this.cycles = 0;\n            this.disableInputs();\n            this.sendWorkerInitFields({\n                random: false,\n                rows: this.rows,\n                cols: this.cols\n            }).then((data)=>{\n                this.drawField();\n                this.renderTime();\n                this.renderPopup();\n                this.enableInputs();\n            });\n        };\n        this.generateNewFields = ()=>{\n            this.loading;\n            this.sendWorkerInitFields({\n                random: true,\n                rows: this.rows,\n                cols: this.cols\n            }).then((data)=>{\n                this.cycles = 0;\n                this.drawField();\n                this.renderPopup();\n            });\n        };\n        this.resizeAndDraw = ()=>{\n            this.setCanvasSize();\n            this.drawField();\n        };\n        this.setColorCell = ()=>{\n            this.colorCell = getComputedStyle(document.documentElement).getPropertyValue('--color');\n        };\n        this.setColorCellAndDraw = ()=>{\n            this.setColorCell();\n            this.drawField();\n        };\n        this.setCanvasSize = ()=>{\n            const width = this.nodes.wrapperCanvasNode.offsetWidth;\n            const height = this.nodes.wrapperCanvasNode.offsetHeight;\n            const aspectRatio = this.cols / this.rows;\n            const canvasWidth = Math.min(width, height * aspectRatio);\n            const canvasHeight = canvasWidth / aspectRatio;\n            this.cellSize = canvasWidth / this.cols;\n            const xPadding = (width - canvasWidth) / 2;\n            const yPadding = (height - canvasHeight) / 2;\n            this.nodes.canvasNode.width = canvasWidth;\n            this.nodes.canvasNode.height = canvasHeight;\n            this.nodes.wrapperCanvasNode.style.padding = `${yPadding}px ${xPadding}px`;\n        };\n        this.stepGame = ()=>{\n            if (this.loading === true) return;\n            return this.sendWorkerUpdateField().then((data)=>{\n                this.drawField();\n                this.cycles = this.cycles + 1;\n                this.renderPopup();\n                return data;\n            });\n        };\n        this.stepAnimationRenderTime = ()=>{\n            this.renderTime();\n        };\n        if (speed < 1) throw new Error(\"GameOfLife: speed \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u043C\\u0435\\u043D\\u044C\\u0448\\u0435 1\");\n        if (speed > 10) throw new Error(\"GameOfLife: speed \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u0431\\u043E\\u043B\\u044C\\u0448\\u0435 10\");\n        this.rows = cellsCountX;\n        this.cols = cellsCountY;\n        this.random = random;\n        this.speed = speed;\n        this.localStorageUse = localStorageUse;\n        this.popupHidden = popupHidden;\n        this.initNodes(injectedNode);\n        this.ctx = this.nodes.canvasNode.getContext(\"2d\");\n        if (this.localStorageUse) this.useLocalStorage();\n        this.initCalcSpeed();\n        this.setCanvasSize();\n        this.setColorCell();\n        this.initInputNodes();\n        this.initPopupHidden();\n        this.sendWorkerInitFields({\n            random: this.random,\n            rows: this.rows,\n            cols: this.cols\n        }).then(({ activeCells: activeCells, field: field, buffer: buffer })=>{\n            this.initEventListeners();\n            this.drawField();\n            this.renderPopup();\n        });\n    }\n    initInputNodes() {\n        this.nodes.popupInputRowsNode.value = String(this.rows);\n        this.nodes.popupInputColsNode.value = String(this.cols);\n    }\n    initPopupHidden() {\n        this.togglePopup(this.popupHidden);\n    }\n    disableInputs() {\n        this.nodes.popupInputRowsNode.disabled = true;\n        this.nodes.popupInputColsNode.disabled = true;\n    }\n    enableInputs() {\n        this.nodes.popupInputRowsNode.disabled = false;\n        this.nodes.popupInputColsNode.disabled = false;\n        if (this.focusedInput !== null) {\n            this.focusedInput.focus();\n            this.focusedInput = null;\n        }\n    }\n    sendWorkerInitFields({ random: random, rows: rows, cols: cols }) {\n        this.load();\n        this.disableInputs();\n        this.worker.postMessage({\n            type: 'initFields',\n            payload: {\n                random: random,\n                rows: rows,\n                cols: cols\n            }\n        });\n        const resultWorker = new Promise((resolve, reject)=>{\n            this.worker.onmessage = (event)=>{\n                const message = event.data;\n                this.loadComplete();\n                this.enableInputs();\n                if (message.type === 'result: initFields') {\n                    const data = message.data;\n                    const { activeCells: activeCells, field: field, buffer: buffer } = data;\n                    this.activeCells = activeCells;\n                    this.field = field;\n                    this.buffer = buffer;\n                    resolve(data);\n                }\n                reject(false);\n            };\n        });\n        return resultWorker;\n    }\n    load() {\n        this.loading = true;\n        this.nodes.popupLoadNode.classList.add('popup__load_active');\n        this.nodes.popupNode.classList.add('popup_load');\n    }\n    loadComplete() {\n        this.loading = false;\n        this.nodes.popupLoadNode.classList.remove('popup__load_active');\n        this.nodes.popupNode.classList.remove('popup_load');\n    }\n    initEventListeners() {\n        window.addEventListener('resize', this.resizeAndDraw);\n        const matchMediaDark = window.matchMedia('(prefers-color-scheme: dark)');\n        matchMediaDark.addEventListener('change', this.setColorCellAndDraw);\n        this.nodes.popupPauseNode.addEventListener('click', ()=>{\n            if (this.played === false) return;\n            this.stopGame();\n        });\n        this.nodes.popupPlayNode.addEventListener('click', ()=>{\n            if (this.played === true) return;\n            this.startGame();\n        });\n        this.nodes.popupGenerateNode.addEventListener('click', this.generateNewFields);\n        this.nodes.canvasNode.addEventListener('pointerdown', (event)=>{\n            if (this.loading === true) return;\n            if (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\n            this.isDragging = true;\n            this.isRealDragging = false;\n        });\n        this.nodes.canvasNode.addEventListener('pointermove', (event)=>{\n            if (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\n            if (this.isDragging === true && this.loading === false) {\n                this.isRealDragging = true;\n                this.generateCellByClick(event, true);\n            }\n        });\n        document.addEventListener('pointerup', (event)=>{\n            if (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\n            const clickOnPopupBool = this.isClickOnElement(event, this.nodes.popupNode);\n            if (clickOnPopupBool === true) return;\n            if (this.isRealDragging === false && this.loading === false) this.generateCellByClick(event, false);\n            this.isDragging = false;\n            this.isRealDragging = false;\n        });\n        this.nodes.popupRandomCheckboxNode.addEventListener('input', ()=>{\n            this.random = !this.random;\n            if (this.localStorageUse) this.setLocalStorage('random', this.random);\n            this.renderRandom();\n        });\n        this.nodes.popupSpeedRangeNode.addEventListener('input', this.calcSpeedInputChange);\n        this.nodes.popupClearNode.addEventListener('click', this.clear);\n        this.nodes.popupStepNode.addEventListener('click', ()=>{\n            this.disableInputs();\n            this.stepGame()?.then((data)=>{\n                this.enableInputs();\n            });\n        });\n        this.nodes.popupInputRowsNode.addEventListener('input', ()=>{\n            const newRows = (0, $d7cbbf251e962942$export$7913c0f032ea53bb)(this.nodes.popupInputRowsNode, 0, 2000);\n            if (this.localStorageUse) this.setLocalStorage('rows', newRows);\n            this.focusedInput = this.nodes.popupInputRowsNode;\n            this.resizeFieldRows(newRows);\n        });\n        this.nodes.popupInputColsNode.addEventListener('input', ()=>{\n            const newCols = (0, $d7cbbf251e962942$export$7913c0f032ea53bb)(this.nodes.popupInputColsNode, 0, 2000);\n            if (this.localStorageUse) this.setLocalStorage('cols', newCols);\n            this.focusedInput = this.nodes.popupInputColsNode;\n            this.resizeFieldCols(newCols);\n        });\n        this.nodes.popupCloseNode.addEventListener('click', ()=>{\n            this.popupHidden = !this.popupHidden;\n            this.togglePopup(this.popupHidden);\n        });\n    }\n    resizeFieldRows(newRows) {\n        if (this.loading === true) return;\n        this.sendWorkerResizeField(newRows, this.cols, this.random).then((data)=>{\n            this.setCanvasSize();\n            this.drawField();\n            this.renderTime();\n            this.renderPopup();\n        });\n    }\n    resizeFieldCols(newCols) {\n        if (this.loading === true) return;\n        this.sendWorkerResizeField(this.rows, newCols, this.random).then((data)=>{\n            this.setCanvasSize();\n            this.drawField();\n            this.renderTime();\n            this.renderPopup();\n        });\n    }\n    sendWorkerResizeField(newRows, newCols, random) {\n        this.load();\n        this.disableInputs();\n        this.worker.postMessage({\n            type: 'resizeField',\n            payload: {\n                newRows: newRows,\n                newCols: newCols,\n                random: random\n            }\n        });\n        const resultWorker = new Promise((resolve, reject)=>{\n            this.worker.onmessage = (event)=>{\n                const message = event.data;\n                this.loadComplete();\n                this.enableInputs();\n                if (message.type === 'result: resizeField') {\n                    const data = message.data;\n                    const { field: field, buffer: buffer, activeCells: activeCells, rows: rows, cols: cols } = data;\n                    this.field = field;\n                    this.buffer = buffer;\n                    this.activeCells = activeCells;\n                    this.rows = rows;\n                    this.cols = cols;\n                    resolve(data);\n                }\n                reject(false);\n            };\n        }).catch(()=>{});\n        return resultWorker;\n    }\n    isClickOnElement(event, element) {\n        const target = event.target; // Получаем целевой элемент клика\n        // Проверяем, является ли целевой элемент или его родительские элементы равным заданному элементу\n        let currentNode = target;\n        while(currentNode != null){\n            if (currentNode === element) return true;\n            currentNode = currentNode.parentElement;\n        }\n        // Если не было найдено совпадений, возвращаем false\n        return false;\n    }\n    sendWorkerDeleteOrCreateCell(typeAction, key) {\n        this.load();\n        this.worker.postMessage({\n            type: 'deleteOrCreateCell',\n            payload: {\n                typeAction: typeAction,\n                key: key\n            }\n        });\n        const resultWorker = new Promise((resolve, reject)=>{\n            this.worker.onmessage = (event)=>{\n                const message = event.data;\n                this.loadComplete();\n                if (message.type === 'result: deleteOrCreateCell') {\n                    const data = message.data;\n                    resolve(data);\n                }\n                reject(false);\n            };\n        });\n        return resultWorker;\n    }\n    initCalcSpeed() {\n        const max = Number(this.nodes.popupSpeedRangeNode.max);\n        const min = Number(this.nodes.popupSpeedRangeNode.min);\n        const speedPercent = (this.speed - 1) / 9;\n        const value = min + speedPercent * (max - min);\n        this.nodes.popupSpeedRangeNode.value = String(value);\n        this.nodes.popupSpeedInfoNode.textContent = String(this.speed);\n    }\n    useLocalStorage() {\n        const lastLocalStorage = this.getLocalStorage();\n        if (lastLocalStorage.random !== undefined) this.random = lastLocalStorage.random;\n        if (lastLocalStorage.speed !== undefined) this.speed = lastLocalStorage.speed;\n        if (lastLocalStorage.rows !== undefined) this.rows = lastLocalStorage.rows;\n        if (lastLocalStorage.cols !== undefined) this.cols = lastLocalStorage.cols;\n        if (lastLocalStorage.popupHidden !== undefined) this.popupHidden = lastLocalStorage.popupHidden;\n    }\n    initNodes(injectedNode) {\n        injectedNode.innerHTML = `\n\t\t\t<div class=\"wrapper\">\n\t\t\t\t<div class=\"wrapper-canvas\">\n\t\t\t\t\t<canvas class=\"canvas\"></canvas>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"popup\">\n\t\t\t\t\t<div class=\"popup__item popup__play\">Play</div>\n\t\t\t\t\t<div class=\"popup__item popup__pause\">\\u{41F}\\u{430}\\u{443}\\u{437}\\u{430}</div>\n\t\t\t\t\t<div class=\"popup__item popup__clear\">\\u{41E}\\u{447}\\u{438}\\u{441}\\u{442}\\u{438}\\u{442}\\u{44C}</div>\n\t\t\t\t\t<div class=\"popup__item popup__step\">\\u{428}\\u{430}\\u{433}</div>\n\t\t\t\t\t<div class=\"popup__item popup__generate\">\\u{421}\\u{433}\\u{435}\\u{43D}\\u{435}\\u{440}\\u{438}\\u{440}\\u{43E}\\u{432}\\u{430}\\u{442}\\u{44C}</div>\n\t\t\t\t\t<label class=\"popup__item popup__random-checkbox-item\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"popup__random-checkbox\">\n\t\t\t\t\t\t<span>\\u{420}\\u{430}\\u{43D}\\u{434}\\u{43E}\\u{43C}</span>\n\t\t\t\t\t</label>\n\t\t\t\t\t<div class=\"popup__item\">\n\t\t\t\t\t\t\\u{412}\\u{440}\\u{435}\\u{43C}\\u{44F}:\n\t\t\t\t\t\t<span class=\"popup__time\">0.0</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"popup__item\">\\u{41F}\\u{43E}\\u{43A}\\u{43E}\\u{43B}\\u{435}\\u{43D}\\u{438}\\u{435}: <span class=\"popup__cycles\">0</span></div>\n\t\t\t\t\t<div class=\"popup__item\">\\u{41D}\\u{430}\\u{441}\\u{435}\\u{43B}\\u{435}\\u{43D}\\u{438}\\u{435}: <span class=\"popup__population\">0</span></div>\n\t\t\t\t\t<div class=\"popup__item\">\n\t\t\t\t\t\t<span>\\u{421}\\u{43A}\\u{43E}\\u{440}\\u{43E}\\u{441}\\u{442}\\u{44C}: </span>\n\t\t\t\t\t\t<span class=\"popup__speed-info\">1</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"popup__item\">\n\t\t\t\t\t\t<input class=\"popup__speed-range\" type=\"range\" min=\"0\" max=\"100\" value=\"50\">\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"popup__item popup__item_inputs\">\n\t\t\t\t\t\t<input type=\"number\" class=\"popup__rows popup__inputs\" placeholder=\"rows\" min=\"0\" max=\"2000\">\n\t\t\t\t\t\t<input type=\"number\" class=\"popup__cols popup__inputs\" placeholder=\"cols\" min=\"0\" max=\"2000\">\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"popup__item popup__close\">\\u{421}\\u{43A}\\u{440}\\u{44B}\\u{442}\\u{44C}</div>\n\n\t\t\t\t\t<div class=\"popup__item popup__load\">\\u{417}\\u{430}\\u{433}\\u{440}\\u{443}\\u{437}\\u{43A}\\u{430}</div>\n\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t`;\n        const popupNode = this._querySelector(injectedNode, '.popup');\n        const canvasNode = this._querySelector(injectedNode, '.canvas');\n        const wrapperCanvasNode = this._querySelector(injectedNode, '.wrapper-canvas');\n        const popupPlayNode = this._querySelector(popupNode, '.popup__play');\n        const popupPauseNode = this._querySelector(popupNode, '.popup__pause');\n        const popupTimeNode = this._querySelector(popupNode, '.popup__time');\n        const popupPopulationNode = this._querySelector(popupNode, '.popup__population');\n        const popupCyclesNode = this._querySelector(popupNode, '.popup__cycles');\n        const popupGenerateNode = this._querySelector(popupNode, '.popup__generate');\n        const popupRandomCheckboxNode = this._querySelector(popupNode, '.popup__random-checkbox');\n        const popupSpeedRangeNode = this._querySelector(popupNode, '.popup__speed-range');\n        const popupSpeedInfoNode = this._querySelector(popupNode, '.popup__speed-info');\n        const popupClearNode = this._querySelector(popupNode, '.popup__clear');\n        const popupStepNode = this._querySelector(popupNode, '.popup__step');\n        const popupLoadNode = this._querySelector(popupNode, '.popup__load');\n        const popupInputRowsNode = this._querySelector(popupNode, '.popup__rows');\n        const popupInputColsNode = this._querySelector(popupNode, '.popup__cols');\n        const popupCloseNode = this._querySelector(popupNode, '.popup__close');\n        this.nodes = {\n            canvasNode: canvasNode,\n            popupNode: popupNode,\n            popupPlayNode: popupPlayNode,\n            popupPauseNode: popupPauseNode,\n            popupTimeNode: popupTimeNode,\n            popupPopulationNode: popupPopulationNode,\n            popupCyclesNode: popupCyclesNode,\n            popupGenerateNode: popupGenerateNode,\n            wrapperCanvasNode: wrapperCanvasNode,\n            popupRandomCheckboxNode: popupRandomCheckboxNode,\n            popupSpeedRangeNode: popupSpeedRangeNode,\n            popupSpeedInfoNode: popupSpeedInfoNode,\n            popupClearNode: popupClearNode,\n            popupStepNode: popupStepNode,\n            popupLoadNode: popupLoadNode,\n            popupInputRowsNode: popupInputRowsNode,\n            popupInputColsNode: popupInputColsNode,\n            popupCloseNode: popupCloseNode\n        };\n    }\n    _querySelector(parentNode, selector) {\n        const node = parentNode.querySelector(selector);\n        if (node === null) throw new Error(`GameOfLife: \\u{44D}\\u{43B}\\u{435}\\u{43C}\\u{435}\\u{43D}\\u{442} \\u{441} \\u{43A}\\u{43B}\\u{430}\\u{441}\\u{441}\\u{43E}\\u{43C} ${selector} \\u{43D}\\u{435} \\u{43D}\\u{430}\\u{439}\\u{434}\\u{435}\\u{43D}`);\n        return node;\n    }\n    getKey(row, col) {\n        return `${row}-${col}`;\n    }\n    drawField() {\n        this.load();\n        this.ctx.clearRect(0, 0, this.nodes.canvasNode.width, this.nodes.canvasNode.height);\n        const cellSize = this.cellSize;\n        this.ctx.fillStyle = this.colorCell;\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.cols; j++){\n            const key = this.getKey(i, j);\n            if (this.field.get(key)) this.ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);\n        }\n        this.loadComplete();\n    }\n    sendWorkerUpdateField() {\n        this.load();\n        this.worker.postMessage({\n            type: 'updateField',\n            payload: {}\n        });\n        const resultWorker = new Promise((resolve, reject)=>{\n            this.worker.onmessage = (event)=>{\n                const message = event.data;\n                this.loadComplete();\n                if (message.type === 'result: updateField') {\n                    const data = message.data;\n                    const { activeCells: activeCells, field: field, buffer: buffer } = data;\n                    this.activeCells = activeCells;\n                    this.field = field;\n                    this.buffer = buffer;\n                    resolve(data);\n                }\n                reject(false);\n            };\n        });\n        return resultWorker;\n    }\n    renderPopup() {\n        this.renderPopulation();\n        this.renderRandom();\n        this.nodes.popupCyclesNode.textContent = String(this.cycles);\n        this.nodes.popupRandomCheckboxNode.checked = this.random;\n    }\n    renderTime() {\n        let gameTime = Date.now() - this.gameStartTime + this.gameLastTime;\n        if (this.gameStartTime === 0) gameTime = 0;\n        this.gameTime = gameTime;\n        this.nodes.popupTimeNode.textContent = (this.gameTime / 1000).toFixed(1);\n    }\n    renderRandom() {\n        if (this.random === true) this.nodes.popupGenerateNode.classList.add('popup__generate_active');\n        else this.nodes.popupGenerateNode.classList.remove('popup__generate_active');\n    }\n    renderPopulation() {\n        this.nodes.popupPopulationNode.textContent = String(this.activeCells);\n    }\n    startGame() {\n        this.disableInputs();\n        this.played = true;\n        this.gameStartTime = Date.now();\n        this.animationObj = (0, $20713660892d2e93$export$281c8d11e819ea94)(this.stepGame, this.interval / this.speed ** 1.5);\n        this.animationTimeId = (0, $20713660892d2e93$export$281c8d11e819ea94)(this.stepAnimationRenderTime);\n    }\n    stopGame() {\n        if (this.played === false) return;\n        this.played = false;\n        this.gameLastTime = this.gameTime;\n        cancelAnimationFrame(this.animationObj.id);\n        cancelAnimationFrame(this.animationTimeId.id);\n        this.enableInputs();\n    }\n    getLocalStorage() {\n        return JSON.parse(localStorage.getItem('life') || '{}');\n    }\n    setLocalStorage(key, value) {\n        const lastLocalStorage = this.getLocalStorage();\n        lastLocalStorage[key] = value;\n        localStorage.setItem('life', JSON.stringify(lastLocalStorage));\n    }\n}\n\n\nconst $b112110fd2ad031c$var$injectedNode = document.querySelector('.injected-game-life');\nif ($b112110fd2ad031c$var$injectedNode === null) throw new Error(\"injectedNode \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\");\nconst $b112110fd2ad031c$var$game = new (0, $e2b0766be83c46e4$export$8981e2cb2c3fa123)({\n    cellsCountX: 100,\n    cellsCountY: 100,\n    random: false,\n    speed: 1,\n    localStorageUse: true,\n    popupHidden: false,\n    injectedNode: $b112110fd2ad031c$var$injectedNode\n});\n\n\n//# sourceMappingURL=index.f8b64d33.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"kAqiv\\\",\\\"index.f8b64d33.js\\\",\\\"3aufl\\\",\\\"worker-game-of-life-logic.46d3668d.js\\\"]\"));","import { GameOfLife } from \"./game-of-life\";\r\n\r\nconst injectedNode = document.querySelector<HTMLElement>('.injected-game-life');\r\n\r\nif (injectedNode === null) {\r\n\tthrow new Error('injectedNode не найден');\r\n}\r\n\r\nconst game = new GameOfLife({\r\n\tcellsCountX: 100,\r\n\tcellsCountY: 100,\r\n\trandom: false,\r\n\tspeed: 1,\r\n\tlocalStorageUse: true,\r\n\tpopupHidden: false,\r\n\tinjectedNode: injectedNode\r\n});\r\n","import { GameOfLifeLocalStorage, GameOfLifeNodes, GameOfLifeParams, GameOfLifeWorkerResult } from \"../interfacesOrTypes\";\r\nimport { requestInterval } from \"./functions/request-interval\";\r\nimport { restrictInputValue } from \"./functions/restrict-input\";\r\n\r\nexport class GameOfLife {\r\n\tprivate ctx: CanvasRenderingContext2D;\r\n\tprivate rows: number;\r\n\tprivate cols: number;\r\n\tprivate cellSize: number;\r\n\tprivate field: Map<string, boolean>;\r\n\tprivate buffer: Map<string, boolean>;\r\n\tprivate colorCell: string;\r\n\tprivate animationObj: { id: number };\r\n\tprivate nodes: GameOfLifeNodes;\r\n\tprivate cycles: number = 0;\r\n\tprivate played: boolean = false;\r\n\tprivate interval: number = 500;\r\n\tprivate gameTime: number = 0;\r\n\tprivate gameStartTime: number = 0;\r\n\tprivate gameLastTime: number = 0;\r\n\tprivate random: boolean = false;\r\n\tprivate speed: number = 0;\r\n\tprivate activeCells: number = 0;\r\n\tprivate localStorageUse: boolean = false;\r\n\tprivate isDragging: boolean = false;\r\n\tprivate isRealDragging: boolean = false;\r\n\tprivate animationTimeId: { id: number };\r\n\tprivate worker: Worker = new Worker(new URL('workers/worker-game-of-life-logic.js', import.meta.url));\r\n\tprivate loading: boolean = false;\r\n\tprivate focusedInput: HTMLInputElement | null = null;\r\n\tprivate popupHidden: boolean = false;\r\n\r\n\tconstructor({ injectedNode, cellsCountX, cellsCountY, random, speed, localStorageUse, popupHidden }: GameOfLifeParams) {\r\n\t\tif (speed < 1) {\r\n\t\t\tthrow new Error('GameOfLife: speed не может быть меньше 1');\r\n\t\t}\r\n\t\tif (speed > 10) {\r\n\t\t\tthrow new Error('GameOfLife: speed не может быть больше 10');\r\n\t\t}\r\n\r\n\t\tthis.rows = cellsCountX;\r\n\t\tthis.cols = cellsCountY;\r\n\t\tthis.random = random;\r\n\t\tthis.speed = speed;\r\n\t\tthis.localStorageUse = localStorageUse;\r\n\t\tthis.popupHidden = popupHidden;\r\n\r\n\t\tthis.initNodes(injectedNode);\r\n\t\tthis.ctx = this.nodes.canvasNode.getContext(\"2d\")!;\r\n\t\tif (this.localStorageUse) this.useLocalStorage();\r\n\t\tthis.initCalcSpeed();\r\n\t\tthis.setCanvasSize();\r\n\t\tthis.setColorCell();\r\n\t\tthis.initInputNodes();\r\n\t\tthis.initPopupHidden();\r\n\r\n\t\tthis.sendWorkerInitFields({\r\n\t\t\trandom: this.random,\r\n\t\t\trows: this.rows,\r\n\t\t\tcols: this.cols\r\n\t\t})\r\n\t\t.then(({ activeCells, field, buffer }) => {\r\n\t\t\tthis.initEventListeners();\r\n\t\t\tthis.drawField();\r\n\t\t\tthis.renderPopup();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate initInputNodes(): void {\r\n\t\tthis.nodes.popupInputRowsNode.value = String(this.rows);\r\n\t\tthis.nodes.popupInputColsNode.value = String(this.cols);\r\n\t}\r\n\r\n\tprivate initPopupHidden(): void {\r\n\t\tthis.togglePopup(this.popupHidden);\r\n\t}\r\n\r\n\tprivate disableInputs(): void {\r\n\t\tthis.nodes.popupInputRowsNode.disabled = true;\r\n\t\tthis.nodes.popupInputColsNode.disabled = true;\r\n\t}\r\n\r\n\tprivate enableInputs(): void {\r\n\t\tthis.nodes.popupInputRowsNode.disabled = false;\r\n\t\tthis.nodes.popupInputColsNode.disabled = false;\r\n\r\n\t\tif (this.focusedInput !== null) {\r\n\t\t\tthis.focusedInput.focus();\r\n\t\t\tthis.focusedInput = null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate sendWorkerInitFields({\r\n\t\trandom, rows, cols\r\n\t}: { random: boolean; rows: number; cols: number }): Promise<GameOfLifeWorkerResult> {\r\n\r\n\t\tthis.load();\r\n\t\tthis.disableInputs();\r\n\r\n\t\tthis.worker.postMessage({\r\n\t\t\ttype: 'initFields',\r\n\t\t\tpayload: {\r\n\t\t\t\trandom: random,\r\n\t\t\t\trows: rows,\r\n\t\t\t\tcols: cols\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst resultWorker = new Promise<GameOfLifeWorkerResult>((resolve, reject) => {\r\n\t\t\tthis.worker.onmessage = (event) => {\r\n\t\t\t\tconst message = event.data;\r\n\r\n\t\t\t\tthis.loadComplete();\r\n\t\t\t\tthis.enableInputs();\r\n\r\n\t\t\t\tif (message.type === 'result: initFields') {\r\n\t\t\t\t\tconst data: GameOfLifeWorkerResult = message.data;\r\n\t\t\t\t\tconst { activeCells, field, buffer } = data;\r\n\r\n\t\t\t\t\tthis.activeCells = activeCells;\r\n\t\t\t\t\tthis.field = field;\r\n\t\t\t\t\tthis.buffer = buffer;\r\n\r\n\t\t\t\t\tresolve(data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treject(false);\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn resultWorker;\r\n\t}\r\n\r\n\tprivate load(): void {\r\n\t\tthis.loading = true;\r\n\t\tthis.nodes.popupLoadNode.classList.add('popup__load_active');\r\n\t\tthis.nodes.popupNode.classList.add('popup_load');\r\n\t}\r\n\r\n\tprivate loadComplete(): void {\r\n\t\tthis.loading = false;\r\n\t\tthis.nodes.popupLoadNode.classList.remove('popup__load_active');\r\n\t\tthis.nodes.popupNode.classList.remove('popup_load');\r\n\t}\r\n\r\n\tprivate initEventListeners(): void {\r\n\t\twindow.addEventListener('resize', this.resizeAndDraw);\r\n\t\tconst matchMediaDark = window.matchMedia('(prefers-color-scheme: dark)');\r\n\r\n\t\tmatchMediaDark.addEventListener('change', this.setColorCellAndDraw);\r\n\r\n\t\tthis.nodes.popupPauseNode.addEventListener('click', () => {\r\n\t\t\tif (this.played === false) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.stopGame();\r\n\t\t});\r\n\r\n\t\tthis.nodes.popupPlayNode.addEventListener('click', () => {\r\n\t\t\tif (this.played === true) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.startGame();\r\n\t\t});\r\n\r\n\t\tthis.nodes.popupGenerateNode.addEventListener('click', this.generateNewFields);\r\n\r\n\t\tthis.nodes.canvasNode.addEventListener('pointerdown', (event) => {\r\n\t\t\tif (this.loading === true) return;\r\n\t\t\tif (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\r\n\t\t\tthis.isDragging = true;\r\n\t\t\tthis.isRealDragging = false;\r\n\t\t});\r\n\r\n\t\tthis.nodes.canvasNode.addEventListener('pointermove', (event) => {\r\n\t\t\tif (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\r\n\t\t\tif (this.isDragging === true && this.loading === false) {\r\n\t\t\t\tthis.isRealDragging = true;\r\n\t\t\t\tthis.generateCellByClick(event, true)\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener('pointerup', (event) => {\r\n\t\t\tif (event.button === 2 || event.button === 1) return false; // Если это правая или средняя кнопка мыши, это не тот клик\r\n\t\t\tconst clickOnPopupBool = this.isClickOnElement(event, this.nodes.popupNode);\r\n\t\t\tif (clickOnPopupBool === true) return;\r\n\t\t\tif (this.isRealDragging === false && this.loading === false) this.generateCellByClick(event, false);\r\n\r\n\t\t\tthis.isDragging = false;\r\n\t\t\tthis.isRealDragging = false;\r\n\t\t});\r\n\r\n\t\tthis.nodes.popupRandomCheckboxNode.addEventListener('input', () => {\r\n\t\t\tthis.random = !this.random;\r\n\t\t\tif (this.localStorageUse) this.setLocalStorage('random', this.random);\r\n\t\t\tthis.renderRandom();\r\n\t\t});\r\n\r\n\t\tthis.nodes.popupSpeedRangeNode.addEventListener('input', this.calcSpeedInputChange);\r\n\t\tthis.nodes.popupClearNode.addEventListener('click', this.clear);\r\n\r\n\t\tthis.nodes.popupStepNode.addEventListener('click', () => {\r\n\t\t\tthis.disableInputs();\r\n\t\t\tthis.stepGame()?.then(data => {\r\n\t\t\t\tthis.enableInputs();\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.nodes.popupInputRowsNode.addEventListener('input', () => {\r\n\t\t\tconst newRows = restrictInputValue(this.nodes.popupInputRowsNode, 0, 2000);\r\n\t\t\tif (this.localStorageUse) this.setLocalStorage('rows', newRows);\r\n\r\n\t\t\tthis.focusedInput = this.nodes.popupInputRowsNode;\r\n\t\t\tthis.resizeFieldRows(newRows);\r\n\t\t});\r\n\r\n\t\tthis.nodes.popupInputColsNode.addEventListener('input', () => {\r\n\t\t\tconst newCols = restrictInputValue(this.nodes.popupInputColsNode, 0, 2000);\r\n\t\t\tif (this.localStorageUse) this.setLocalStorage('cols', newCols);\r\n\r\n\t\t\tthis.focusedInput = this.nodes.popupInputColsNode;\r\n\t\t\tthis.resizeFieldCols(newCols);\r\n\t\t});\r\n\r\n\t\tthis.nodes.popupCloseNode.addEventListener('click', () => {\r\n\t\t\tthis.popupHidden = !this.popupHidden;\r\n\t\t\tthis.togglePopup(this.popupHidden);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate togglePopup = (popupHidden: boolean): void => {\r\n\t\tif (this.localStorageUse === true) this.setLocalStorage('popupHidden', this.popupHidden);\r\n\r\n\t\tif (this.popupHidden === true) {\r\n\t\t\tthis.nodes.popupNode.classList.add('popup_hidden');\r\n\t\t\tthis.nodes.popupCloseNode.textContent = 'Открыть';\r\n\t\t} else {\r\n\t\t\tthis.nodes.popupNode.classList.remove('popup_hidden');\r\n\t\t\tthis.nodes.popupCloseNode.textContent = 'Скрыть';\r\n\t\t}\r\n\t}\r\n\r\n\tprivate resizeFieldRows(newRows: number): void {\r\n\t\tif (this.loading === true) return;\r\n\r\n\t\tthis.sendWorkerResizeField(newRows, this.cols, this.random)\r\n\t\t.then((data) => {\r\n\t\t\tthis.setCanvasSize();\r\n\t\t\tthis.drawField();\r\n\t\t\tthis.renderTime();\r\n\t\t\tthis.renderPopup();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate resizeFieldCols(newCols: number): void {\r\n\t\tif (this.loading === true) return;\r\n\r\n\t\tthis.sendWorkerResizeField(this.rows, newCols, this.random)\r\n\t\t.then((data) => {\r\n\t\t\tthis.setCanvasSize();\r\n\t\t\tthis.drawField();\r\n\t\t\tthis.renderTime();\r\n\t\t\tthis.renderPopup();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate sendWorkerResizeField(newRows: number, newCols: number, random: boolean): Promise<void | GameOfLifeWorkerResult> {\r\n\t\tthis.load();\r\n\t\tthis.disableInputs();\r\n\r\n\t\tthis.worker.postMessage({\r\n\t\t\ttype: 'resizeField',\r\n\t\t\tpayload: {\r\n\t\t\t\tnewRows: newRows,\r\n\t\t\t\tnewCols: newCols,\r\n\t\t\t\trandom: random\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst resultWorker = new Promise<GameOfLifeWorkerResult>((resolve, reject) => {\r\n\t\t\tthis.worker.onmessage = (event) => {\r\n\t\t\t\tconst message = event.data;\r\n\r\n\t\t\t\tthis.loadComplete();\r\n\t\t\t\tthis.enableInputs();\r\n\r\n\r\n\t\t\t\tif (message.type === 'result: resizeField') {\r\n\t\t\t\t\tconst data: GameOfLifeWorkerResult = message.data;\r\n\t\t\t\t\tconst { field, buffer, activeCells, rows, cols } = data;\r\n\r\n\t\t\t\t\tthis.field = field;\r\n\t\t\t\t\tthis.buffer = buffer;\r\n\t\t\t\t\tthis.activeCells = activeCells;\r\n\t\t\t\t\tthis.rows = rows;\r\n\t\t\t\t\tthis.cols = cols;\r\n\r\n\t\t\t\t\tresolve(data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treject(false);\r\n\t\t\t};\r\n\t\t}).catch(() => {});\r\n\r\n\t\treturn resultWorker;\r\n\t}\r\n\r\n\tprivate isClickOnElement(event: MouseEvent, element: Element): boolean {\r\n\t\tconst target = event.target as Element; // Получаем целевой элемент клика\r\n\r\n\t\t// Проверяем, является ли целевой элемент или его родительские элементы равным заданному элементу\r\n\t\tlet currentNode: Element | null = target;\r\n\t\twhile (currentNode != null) {\r\n\t\t\tif (currentNode === element) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tcurrentNode = currentNode.parentElement;\r\n\t\t}\r\n\r\n\t\t// Если не было найдено совпадений, возвращаем false\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate sendWorkerDeleteOrCreateCell(typeAction: 'delete' | 'create', key: string): Promise<GameOfLifeWorkerResult> {\r\n\t\tthis.load();\r\n\r\n\t\tthis.worker.postMessage({\r\n\t\t\ttype: 'deleteOrCreateCell',\r\n\t\t\tpayload: {\r\n\t\t\t\ttypeAction: typeAction,\r\n\t\t\t\tkey: key\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst resultWorker = new Promise<GameOfLifeWorkerResult>((resolve, reject) => {\r\n\t\t\tthis.worker.onmessage = (event) => {\r\n\t\t\t\tconst message = event.data;\r\n\r\n\t\t\t\tthis.loadComplete();\r\n\r\n\t\t\t\tif (message.type === 'result: deleteOrCreateCell') {\r\n\t\t\t\t\tconst data: GameOfLifeWorkerResult = message.data;\r\n\t\t\t\t\tresolve(data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treject(false);\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn resultWorker;\r\n\t}\r\n\r\n\tprivate generateCellByClick = (event: MouseEvent, moved: boolean = false): void => {\r\n\t\tif (this.played === true) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst rect = this.nodes.canvasNode.getBoundingClientRect();\r\n\t\tconst x = event.clientX - rect.left;\r\n\t\tconst y = event.clientY - rect.top;\r\n\t\tconst col = Math.floor(x / this.cellSize);\r\n\t\tconst row = Math.floor(y / this.cellSize);\r\n\t\tconst key = this.getKey(row, col);\r\n\r\n\t\tconst isCellAlive = this.field.get(key);\r\n\r\n\t\tconst deleteCell = () => {\r\n\t\t\tthis.activeCells--;\r\n\t\t\tthis.field.set(key, false);\r\n\t\t\tthis.sendWorkerDeleteOrCreateCell('delete', key).then();\r\n\t\t};\r\n\r\n\t\tconst createCell = () => {\r\n\t\t\tthis.activeCells++;\r\n\t\t\tthis.field.set(key, true);\r\n\t\t\tthis.sendWorkerDeleteOrCreateCell('create', key).then();\r\n\t\t}\r\n\r\n\t\tif (isCellAlive === false && moved === true) {\r\n\t\t\tcreateCell();\r\n\t\t} else if (isCellAlive === false && moved === false) {\r\n\t\t\tcreateCell();\r\n\t\t} else if (isCellAlive === true && moved === false) {\r\n\t\t\tdeleteCell();\r\n\t\t}\r\n\r\n\t\tthis.renderPopulation();\r\n\t\tthis.drawField();\r\n\t}\r\n\r\n\tprivate initCalcSpeed(): void {\r\n\t\tconst max = Number(this.nodes.popupSpeedRangeNode.max);\r\n\t\tconst min = Number(this.nodes.popupSpeedRangeNode.min);\r\n\r\n\t\tconst speedPercent = (this.speed - 1) / 9;\r\n\t\tconst value = min + (speedPercent * (max - min));\r\n\r\n\t\tthis.nodes.popupSpeedRangeNode.value = String(value);\r\n\t\tthis.nodes.popupSpeedInfoNode.textContent = String(this.speed);\r\n\t}\r\n\r\n\tprivate calcSpeedInputChange = (): void => {\r\n\t\tconst lastGameState = this.played;\r\n\t\tthis.stopGame();\r\n\r\n\t\tconst currentVal = this.nodes.popupSpeedRangeNode.valueAsNumber;\r\n\t\tconst max = Number(this.nodes.popupSpeedRangeNode.max);\r\n\t\tconst min = Number(this.nodes.popupSpeedRangeNode.min);\r\n\r\n\t\tconst end = max - min;\r\n\t\tconst currentValMod = currentVal - min;\r\n\r\n\t\tconst currentValPercent = currentValMod / end;\r\n\t\tconst newSpeed = Number(((currentValPercent * 9) + 1).toFixed(1));\r\n\t\tthis.speed = newSpeed;\r\n\r\n\t\tthis.nodes.popupSpeedInfoNode.textContent = String(this.speed);\r\n\r\n\t\tif (this.localStorageUse) this.setLocalStorage('speed', this.speed);\r\n\r\n\t\tif (lastGameState === true) this.startGame();\r\n\t}\r\n\r\n\tprivate useLocalStorage(): void {\r\n\t\tconst lastLocalStorage = this.getLocalStorage();\r\n\r\n\t\tif (lastLocalStorage.random !== undefined) {\r\n\t\t\tthis.random = lastLocalStorage.random;\r\n\t\t}\r\n\r\n\t\tif (lastLocalStorage.speed !== undefined) {\r\n\t\t\tthis.speed = lastLocalStorage.speed;\r\n\t\t}\r\n\r\n\t\tif (lastLocalStorage.rows !== undefined) {\r\n\t\t\tthis.rows = lastLocalStorage.rows;\r\n\t\t}\r\n\r\n\t\tif (lastLocalStorage.cols !== undefined) {\r\n\t\t\tthis.cols = lastLocalStorage.cols;\r\n\t\t}\r\n\r\n\t\tif (lastLocalStorage.popupHidden !== undefined) {\r\n\t\t\tthis.popupHidden = lastLocalStorage.popupHidden;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate clear = (): void => {\r\n\t\tif (this.loading === true) false;\r\n\r\n\t\tthis.stopGame();\r\n\t\tthis.gameTime = 0;\r\n\t\tthis.gameLastTime = 0;\r\n\t\tthis.gameStartTime = 0;\r\n\t\tthis.cycles = 0;\r\n\r\n\t\tthis.disableInputs();\r\n\r\n\t\tthis.sendWorkerInitFields({\r\n\t\t\trandom: false,\r\n\t\t\trows: this.rows,\r\n\t\t\tcols: this.cols\r\n\t\t}).then(data => {\r\n\t\t\tthis.drawField();\r\n\t\t\tthis.renderTime();\r\n\t\t\tthis.renderPopup();\r\n\t\t\tthis.enableInputs();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate generateNewFields = (): void => {\r\n\t\tif (this.loading === true) false;\r\n\r\n\t\tthis.sendWorkerInitFields({\r\n\t\t\trandom: true,\r\n\t\t\trows: this.rows,\r\n\t\t\tcols: this.cols\r\n\t\t}).then(data => {\r\n\t\t\tthis.cycles = 0;\r\n\t\t\tthis.drawField();\r\n\t\t\tthis.renderPopup();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate initNodes(injectedNode: HTMLElement): void {\r\n\r\n\t\tinjectedNode.innerHTML = `\r\n\t\t\t<div class=\"wrapper\">\r\n\t\t\t\t<div class=\"wrapper-canvas\">\r\n\t\t\t\t\t<canvas class=\"canvas\"></canvas>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"popup\">\r\n\t\t\t\t\t<div class=\"popup__item popup__play\">Play</div>\r\n\t\t\t\t\t<div class=\"popup__item popup__pause\">Пауза</div>\r\n\t\t\t\t\t<div class=\"popup__item popup__clear\">Очистить</div>\r\n\t\t\t\t\t<div class=\"popup__item popup__step\">Шаг</div>\r\n\t\t\t\t\t<div class=\"popup__item popup__generate\">Сгенерировать</div>\r\n\t\t\t\t\t<label class=\"popup__item popup__random-checkbox-item\">\r\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"popup__random-checkbox\">\r\n\t\t\t\t\t\t<span>Рандом</span>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<div class=\"popup__item\">\r\n\t\t\t\t\t\tВремя:\r\n\t\t\t\t\t\t<span class=\"popup__time\">0.0</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"popup__item\">Поколение: <span class=\"popup__cycles\">0</span></div>\r\n\t\t\t\t\t<div class=\"popup__item\">Население: <span class=\"popup__population\">0</span></div>\r\n\t\t\t\t\t<div class=\"popup__item\">\r\n\t\t\t\t\t\t<span>Скорость: </span>\r\n\t\t\t\t\t\t<span class=\"popup__speed-info\">1</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"popup__item\">\r\n\t\t\t\t\t\t<input class=\"popup__speed-range\" type=\"range\" min=\"0\" max=\"100\" value=\"50\">\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"popup__item popup__item_inputs\">\r\n\t\t\t\t\t\t<input type=\"number\" class=\"popup__rows popup__inputs\" placeholder=\"rows\" min=\"0\" max=\"2000\">\r\n\t\t\t\t\t\t<input type=\"number\" class=\"popup__cols popup__inputs\" placeholder=\"cols\" min=\"0\" max=\"2000\">\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"popup__item popup__close\">Скрыть</div>\r\n\r\n\t\t\t\t\t<div class=\"popup__item popup__load\">Загрузка</div>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t`;\r\n\r\n\t\tconst popupNode = this._querySelector<HTMLElement>(injectedNode, '.popup');\r\n\t\tconst canvasNode = this._querySelector<HTMLCanvasElement>(injectedNode, '.canvas');\r\n\t\tconst wrapperCanvasNode = this._querySelector<HTMLElement>(injectedNode, '.wrapper-canvas');\r\n\t\tconst popupPlayNode = this._querySelector<HTMLElement>(popupNode, '.popup__play');\r\n\t\tconst popupPauseNode = this._querySelector<HTMLElement>(popupNode, '.popup__pause');\r\n\t\tconst popupTimeNode = this._querySelector<HTMLElement>(popupNode, '.popup__time');\r\n\t\tconst popupPopulationNode = this._querySelector<HTMLElement>(popupNode, '.popup__population');\r\n\t\tconst popupCyclesNode = this._querySelector<HTMLElement>(popupNode, '.popup__cycles');\r\n\t\tconst popupGenerateNode = this._querySelector<HTMLElement>(popupNode, '.popup__generate');\r\n\t\tconst popupRandomCheckboxNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__random-checkbox');\r\n\t\tconst popupSpeedRangeNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__speed-range');\r\n\t\tconst popupSpeedInfoNode = this._querySelector<HTMLElement>(popupNode, '.popup__speed-info');\r\n\t\tconst popupClearNode = this._querySelector<HTMLElement>(popupNode, '.popup__clear');\r\n\t\tconst popupStepNode = this._querySelector<HTMLElement>(popupNode, '.popup__step');\r\n\t\tconst popupLoadNode = this._querySelector<HTMLElement>(popupNode, '.popup__load');\r\n\t\tconst popupInputRowsNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__rows');\r\n\t\tconst popupInputColsNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__cols');\r\n\t\tconst popupCloseNode = this._querySelector<HTMLInputElement>(popupNode, '.popup__close');\r\n\r\n\t\tthis.nodes = {\r\n\t\t\tcanvasNode: canvasNode,\r\n\t\t\tpopupNode: popupNode,\r\n\t\t\tpopupPlayNode: popupPlayNode,\r\n\t\t\tpopupPauseNode: popupPauseNode,\r\n\t\t\tpopupTimeNode: popupTimeNode,\r\n\t\t\tpopupPopulationNode: popupPopulationNode,\r\n\t\t\tpopupCyclesNode: popupCyclesNode,\r\n\t\t\tpopupGenerateNode: popupGenerateNode,\r\n\t\t\twrapperCanvasNode: wrapperCanvasNode,\r\n\t\t\tpopupRandomCheckboxNode: popupRandomCheckboxNode,\r\n\t\t\tpopupSpeedRangeNode: popupSpeedRangeNode,\r\n\t\t\tpopupSpeedInfoNode: popupSpeedInfoNode,\r\n\t\t\tpopupClearNode: popupClearNode,\r\n\t\t\tpopupStepNode: popupStepNode,\r\n\t\t\tpopupLoadNode: popupLoadNode,\r\n\t\t\tpopupInputRowsNode: popupInputRowsNode,\r\n\t\t\tpopupInputColsNode: popupInputColsNode,\r\n\t\t\tpopupCloseNode: popupCloseNode\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _querySelector<T = Element>(parentNode: Element | Document, selector: string): T {\r\n\t\tconst node = parentNode.querySelector(selector);\r\n\t\tif (node === null) {\r\n\t\t\tthrow new Error(`GameOfLife: элемент с классом ${selector} не найден`);\r\n\t\t}\r\n\t\treturn node as T;\r\n\t}\r\n\r\n\r\n\tprivate resizeAndDraw = (): void => {\r\n\t\tthis.setCanvasSize();\r\n\t\tthis.drawField();\r\n\t}\r\n\r\n\tprivate setColorCell = (): void => {\r\n\t\tthis.colorCell = getComputedStyle(document.documentElement).getPropertyValue('--color');\r\n\t}\r\n\r\n\tprivate setColorCellAndDraw = (): void => {\r\n\t\tthis.setColorCell();\r\n\t\tthis.drawField();\r\n\t}\r\n\r\n\tprivate setCanvasSize = (): void => {\r\n\t\tconst width = this.nodes.wrapperCanvasNode.offsetWidth;\r\n\t\tconst height = this.nodes.wrapperCanvasNode.offsetHeight;\r\n\r\n\t\tconst aspectRatio = this.cols / this.rows;\r\n\r\n\t\tconst canvasWidth = Math.min(width, height * aspectRatio);\r\n\t\tconst canvasHeight = canvasWidth / aspectRatio;\r\n\r\n\t\tthis.cellSize = canvasWidth / this.cols;\r\n\r\n\t\tconst xPadding = (width - canvasWidth) / 2;\r\n\t\tconst yPadding = (height - canvasHeight) / 2;\r\n\r\n\t\tthis.nodes.canvasNode.width = canvasWidth;\r\n\t\tthis.nodes.canvasNode.height = canvasHeight;\r\n\r\n\t\tthis.nodes.wrapperCanvasNode.style.padding = `${yPadding}px ${xPadding}px`;\r\n\t}\r\n\r\n\tprivate getKey(row: number, col: number): string {\r\n\t\treturn `${row}-${col}`;\r\n\t}\r\n\r\n\tprivate drawField(): void {\r\n\t\tthis.load();\r\n\r\n\t\tthis.ctx.clearRect(0, 0, this.nodes.canvasNode.width, this.nodes.canvasNode.height);\r\n\t\tconst cellSize = this.cellSize;\r\n\r\n\t\tthis.ctx.fillStyle = this.colorCell;\r\n\r\n\t\tfor (let i = 0; i < this.rows; i++) {\r\n\t\t\tfor (let j = 0; j < this.cols; j++) {\r\n\t\t\t\tconst key = this.getKey(i, j);\r\n\t\t\t\tif (this.field.get(key)) {\r\n\t\t\t\t\tthis.ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.loadComplete();\r\n\t}\r\n\r\n\tprivate sendWorkerUpdateField(): Promise<GameOfLifeWorkerResult> {\r\n\t\tthis.load();\r\n\r\n\t\tthis.worker.postMessage({\r\n\t\t\ttype: 'updateField',\r\n\t\t\tpayload: {}\r\n\t\t});\r\n\r\n\t\tconst resultWorker = new Promise<GameOfLifeWorkerResult>((resolve, reject) => {\r\n\t\t\tthis.worker.onmessage = (event) => {\r\n\t\t\t\tconst message = event.data;\r\n\r\n\t\t\t\tthis.loadComplete();\r\n\r\n\t\t\t\tif (message.type === 'result: updateField') {\r\n\t\t\t\t\tconst data: GameOfLifeWorkerResult = message.data;\r\n\t\t\t\t\tconst { activeCells, field, buffer } = data;\r\n\r\n\t\t\t\t\tthis.activeCells = activeCells;\r\n\t\t\t\t\tthis.field = field;\r\n\t\t\t\t\tthis.buffer = buffer;\r\n\r\n\t\t\t\t\tresolve(data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treject(false);\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn resultWorker;\r\n\t}\r\n\r\n\tprivate renderPopup(): void {\r\n\t\tthis.renderPopulation();\r\n\t\tthis.renderRandom();\r\n\t\tthis.nodes.popupCyclesNode.textContent = String(this.cycles);\r\n\t\tthis.nodes.popupRandomCheckboxNode.checked = this.random;\r\n\t}\r\n\r\n\tprivate renderTime(): void {\r\n\t\tlet gameTime = Date.now() - this.gameStartTime + this.gameLastTime;\r\n\t\tif (this.gameStartTime === 0) gameTime = 0;\r\n\t\tthis.gameTime = gameTime;\r\n\r\n\t\tthis.nodes.popupTimeNode.textContent = (this.gameTime / 1000).toFixed(1);\r\n\t}\r\n\r\n\tprivate renderRandom(): void {\r\n\t\tif (this.random === true) {\r\n\t\t\tthis.nodes.popupGenerateNode.classList.add('popup__generate_active');\r\n\t\t} else {\r\n\t\t\tthis.nodes.popupGenerateNode.classList.remove('popup__generate_active');\r\n\t\t}\r\n\t}\r\n\r\n\tprivate renderPopulation(): void {\r\n\t\tthis.nodes.popupPopulationNode.textContent = String(this.activeCells);\r\n\t}\r\n\r\n\tprivate stepGame = (): Promise<GameOfLifeWorkerResult> | undefined => {\r\n\t\tif (this.loading === true) return;\r\n\r\n\t\treturn this.sendWorkerUpdateField()\r\n\t\t.then(data => {\r\n\t\t\tthis.drawField();\r\n\t\t\tthis.cycles = this.cycles + 1;\r\n\t\t\tthis.renderPopup();\r\n\t\t\treturn data;\r\n\t\t});\r\n\t}\r\n\r\n\tprivate startGame(): void {\r\n\t\tthis.disableInputs();\r\n\t\tthis.played = true;\r\n\t\tthis.gameStartTime = Date.now();\r\n\t\tthis.animationObj = requestInterval(this.stepGame, this.interval / this.speed ** 1.5);\r\n\t\tthis.animationTimeId = requestInterval(this.stepAnimationRenderTime);\r\n\t}\r\n\r\n\tprivate stepAnimationRenderTime = () => {\r\n\t\tthis.renderTime();\r\n\t}\r\n\r\n\tpublic stopGame(): void {\r\n\t\tif (this.played === false) return;\r\n\t\tthis.played = false;\r\n\t\tthis.gameLastTime = this.gameTime;\r\n\t\tcancelAnimationFrame(this.animationObj.id);\r\n\t\tcancelAnimationFrame(this.animationTimeId.id);\r\n\t\tthis.enableInputs();\r\n\t}\r\n\r\n\tprivate getLocalStorage(): GameOfLifeLocalStorage {\r\n\t\treturn JSON.parse(localStorage.getItem('life') || '{}');\r\n\t}\r\n\r\n\tprivate setLocalStorage<T>(key: string, value: T): void {\r\n\t\tconst lastLocalStorage = this.getLocalStorage();\r\n\r\n\t\tlastLocalStorage[key] = value;\r\n\r\n\t\tlocalStorage.setItem('life', JSON.stringify(lastLocalStorage));\r\n\t}\r\n\r\n}\r\n\r\n\r\n","export function requestInterval(fn: () => void, interval: number = 0): {id: number} {\r\n  const obj = {\r\n    id: 0,\r\n  };\r\n  let start = Date.now();\r\n\r\n  const animate = () => {\r\n\t\tif (interval === 0) {\r\n\t\t\tfn();\r\n\t\t\tobj.id = requestAnimationFrame(animate);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n    const now = Date.now();\r\n    const delta = now - start;\r\n\r\n    if (delta >= interval) {\r\n      fn();\r\n      start = now - (delta % interval);\r\n    }\r\n\r\n    obj.id = requestAnimationFrame(animate);\r\n  };\r\n\r\n  obj.id = requestAnimationFrame(animate);\r\n\r\n  return obj;\r\n}\r\n","export function restrictInputValue(input: HTMLInputElement, min: number, max: number) {\r\n\tlet value = parseInt(input.value);\r\n\r\n\tif (isNaN(value)) {\r\n\t\tvalue = min;\r\n\t} else if (value < min) {\r\n\t\tvalue = min;\r\n\t} else if (value > max) {\r\n\t\tvalue = max;\r\n\t}\r\n\r\n\tinput.value = value.toString();\r\n\r\n\treturn value;\r\n}\r\n","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(\"worker-game-of-life-logic.46d3668d.js\");\nmodule.exports = workerURL(url.toString(), url.origin, true);","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","$20713660892d2e93$export$281c8d11e819ea94","fn","interval","obj","id","start","Date","now","animate","requestAnimationFrame","delta","$d7cbbf251e962942$export$7913c0f032ea53bb","input","min","max","value","parseInt","isNaN","toString","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","JSON","parse","$059802d1429a4f6f$exports","$56b621a6dd25b2cb$exports","workerUrl","origin","isESM","self","location","source","stringify","createObjectURL","Blob","type","$059802d1429a4f6f$var$url","$b112110fd2ad031c$var$injectedNode","document","querySelector","constructor","injectedNode","cellsCountX","cellsCountY","random","speed","localStorageUse","popupHidden","cycles","played","gameTime","gameStartTime","gameLastTime","activeCells","isDragging","isRealDragging","worker","Worker","loading","focusedInput","togglePopup","setLocalStorage","nodes","popupNode","classList","add","popupCloseNode","textContent","remove","generateCellByClick","event","moved","rect","canvasNode","getBoundingClientRect","x","clientX","left","y","clientY","top","col","Math","floor","cellSize","row","key","getKey","isCellAlive","field","createCell","sendWorkerDeleteOrCreateCell","then","deleteCell","renderPopulation","drawField","calcSpeedInputChange","lastGameState","stopGame","currentVal","popupSpeedRangeNode","valueAsNumber","Number","newSpeed","currentValPercent","toFixed","popupSpeedInfoNode","String","startGame","clear","disableInputs","sendWorkerInitFields","rows","cols","data","renderTime","renderPopup","enableInputs","generateNewFields","resizeAndDraw","setCanvasSize","setColorCell","colorCell","getComputedStyle","documentElement","getPropertyValue","setColorCellAndDraw","width","wrapperCanvasNode","offsetWidth","height","offsetHeight","aspectRatio","canvasWidth","canvasHeight","style","padding","stepGame","sendWorkerUpdateField","stepAnimationRenderTime","initNodes","ctx","getContext","useLocalStorage","initCalcSpeed","initInputNodes","initPopupHidden","buffer","initEventListeners","popupInputRowsNode","popupInputColsNode","disabled","focus","load","postMessage","payload","Promise","resolve","reject","onmessage","message","loadComplete","popupLoadNode","window","addEventListener","matchMediaDark","matchMedia","popupPauseNode","popupPlayNode","popupGenerateNode","button","isClickOnElement","popupRandomCheckboxNode","renderRandom","popupClearNode","popupStepNode","newRows","resizeFieldRows","newCols","resizeFieldCols","sendWorkerResizeField","catch","element","currentNode","target","parentElement","typeAction","speedPercent","lastLocalStorage","getLocalStorage","undefined","innerHTML","_querySelector","popupTimeNode","popupPopulationNode","popupCyclesNode","parentNode","selector","node","clearRect","fillStyle","j","fillRect","checked","animationObj","animationTimeId","cancelAnimationFrame","localStorage","getItem","setItem"],"version":3,"file":"index.f8b64d33.js.map"}