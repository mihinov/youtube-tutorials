{"mappings":"ACiCA,SAAS,KACR,AAZD,WACC,GAAM,CAAE,MAAA,CAAK,CAAE,OAAA,CAAM,CAAE,CAAG,EAAW,qBAArC,EAEA,CAAA,EAAW,KAAA,CAAQ,EACnB,EAAW,MAAA,CAAS,CACrB,IAQC,EAAI,SAAA,CAAY,IAChB,EAAI,QAAA,CAAS,EAAG,EAAG,OAAO,UAAA,CAAY,OAAO,WAA7C,CACD,CAiCA,MAAM,EAAa,SAAS,aAAA,CAAc,WACpC,EAAM,EAAW,UAAA,CAAW,MAC5B,EAAW,OAAO,QAAA,CAAS,eAAjC,CACM,EAAa,IAAM,iBAAiB,GAAU,gBAAA,CAAiB,aAOrE,IAEA,OAAO,gBAAA,CAAiB,SArDxB,SAAgB,CAAK,EACpB,GACD,GAoDA,OAAO,UAAA,CAAW,gCAAgC,gBAAA,CAAiB,SAAU,KAC5E,GACD","sources":["<anon>","pointer-events/index.js"],"sourcesContent":["const dragStart = (e)=>{\n    if (isDrawing === true) return;\n    isDrawing = true;\n    lastX = e.clientX;\n    lastY = e.clientY;\n    drawPoint(lastX, lastY);\n};\nconst dragMove = (e)=>{\n    if (isDrawing === false) return;\n    drawLine(lastX, lastY, e.clientX, e.clientY);\n    lastX = e.clientX;\n    lastY = e.clientY;\n};\nconst dragStop = (e)=>{\n    if (isDrawing === false) return;\n    isDrawing = false;\n    drawSquare(e.clientX, e.clientY);\n};\nfunction setSizeCanvas() {\n    const { width, height } = canvasNode.getBoundingClientRect();\n    canvasNode.width = width;\n    canvasNode.height = height;\n}\nfunction resize(event) {\n    drawCanvas();\n}\nfunction drawCanvas() {\n    setSizeCanvas();\n    ctx.fillStyle = getBgColor();\n    ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);\n}\nfunction drawPoint(x, y) {\n    const vmin = Math.min(canvasNode.clientWidth, canvasNode.clientHeight);\n    ctx.fillStyle = getColor();\n    ctx.beginPath();\n    ctx.arc(x, y, vmin * 0.04, 0, 2 * Math.PI);\n    ctx.closePath();\n    ctx.fill();\n}\nfunction drawLine(x1, y1, x2, y2) {\n    const vmin = Math.min(canvasNode.clientWidth, canvasNode.clientHeight);\n    ctx.strokeStyle = getColor();\n    ctx.lineJoin = \"round\"; // добавить это значение\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineWidth = vmin * 0.02; // изменить значение толщины линии\n    ctx.closePath();\n    ctx.stroke();\n}\nfunction drawSquare(x, y) {\n    const vmin = Math.min(canvasNode.clientWidth, canvasNode.clientHeight);\n    const widthSquare = vmin * 0.05;\n    ctx.beginPath();\n    ctx.rect(x - widthSquare / 2, y - widthSquare / 2, widthSquare, widthSquare);\n    ctx.closePath();\n    ctx.fillStyle = \"yellow\";\n    ctx.fill();\n}\nconst canvasNode = document.querySelector(\".canvas\");\nconst ctx = canvasNode.getContext(\"2d\");\nconst htmlNode = window.document.documentElement;\nconst getBgColor = ()=>getComputedStyle(htmlNode).getPropertyValue(\"--bgColor\");\nconst getColor = ()=>getComputedStyle(htmlNode).getPropertyValue(\"--color\");\nlet isDrawing = false;\nlet lastX = 0;\nlet lastY = 0;\ndrawCanvas();\nwindow.addEventListener(\"resize\", resize);\nwindow.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", ()=>{\n    drawCanvas();\n});\n\n//# sourceMappingURL=index.784ca78f.js.map\n","const dragStart = (e) => {\n\tif (isDrawing === true) return;\n\n\tisDrawing = true;\n\tlastX = e.clientX;\n\tlastY = e.clientY;\n\tdrawPoint(lastX, lastY);\n};\n\nconst dragMove = (e) => {\n\tif (isDrawing === false) return;\n\tdrawLine(lastX, lastY, e.clientX, e.clientY);\n\tlastX = e.clientX;\n\tlastY = e.clientY;\n};\n\nconst dragStop = (e) => {\n\tif (isDrawing === false) return;\n\tisDrawing = false;\n\tdrawSquare(e.clientX, e.clientY);\n};\n\nfunction setSizeCanvas() {\n\tconst { width, height } = canvasNode.getBoundingClientRect();\n\n\tcanvasNode.width = width;\n\tcanvasNode.height = height;\n}\n\nfunction resize(event) {\n\tdrawCanvas();\n}\n\nfunction drawCanvas() {\n\tsetSizeCanvas();\n\tctx.fillStyle = getBgColor();\n\tctx.fillRect(0, 0, window.innerWidth, window.innerHeight);\n}\n\nfunction drawPoint(x, y) {\n\tconst vmin = Math.min(canvasNode.clientWidth, canvasNode.clientHeight);\n\tctx.fillStyle = getColor();\n\tctx.beginPath();\n\tctx.arc(x, y, vmin * 0.04, 0, 2 * Math.PI);\n\tctx.closePath();\n\tctx.fill();\n}\n\nfunction drawLine(x1, y1, x2, y2) {\n\tconst vmin = Math.min(canvasNode.clientWidth, canvasNode.clientHeight);\n\tctx.strokeStyle = getColor();\n\tctx.lineJoin = \"round\"; // добавить это значение\n\tctx.beginPath();\n\tctx.moveTo(x1, y1);\n\tctx.lineTo(x2, y2);\n\tctx.lineWidth = vmin * 0.02; // изменить значение толщины линии\n\tctx.closePath();\n\tctx.stroke();\n}\n\nfunction drawSquare(x, y) {\n\tconst vmin = Math.min(canvasNode.clientWidth, canvasNode.clientHeight);\n\tconst widthSquare = vmin * 0.05;\n\tctx.beginPath();\n\tctx.rect(x - widthSquare / 2, y - widthSquare / 2, widthSquare, widthSquare);\n\tctx.closePath();\n\tctx.fillStyle = 'yellow';\n\tctx.fill();\n}\n\nconst canvasNode = document.querySelector('.canvas');\nconst ctx = canvasNode.getContext('2d');\nconst htmlNode = window.document.documentElement;\nconst getBgColor = () => getComputedStyle(htmlNode).getPropertyValue('--bgColor');\nconst getColor = () => getComputedStyle(htmlNode).getPropertyValue('--color');\n\nlet isDrawing = false;\nlet lastX = 0;\nlet lastY = 0;\n\ndrawCanvas()\n\nwindow.addEventListener('resize', resize);\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n\tdrawCanvas();\n});\n"],"names":["drawCanvas","setSizeCanvas","width","height","canvasNode","getBoundingClientRect","ctx","fillStyle","getBgColor","fillRect","window","innerWidth","innerHeight","document","querySelector","getContext","htmlNode","documentElement","getComputedStyle","getPropertyValue","addEventListener","event","matchMedia"],"version":3,"file":"index.784ca78f.js.map"}