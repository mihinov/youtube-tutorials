{"mappings":"A,O,c,C,C,E,c,C,I,I,E,I,K,E,W,C,E,a,C,C,ECKO,OAAM,EA6BZ,WAAW,iBAA4B,CACtC,MAAO,CACN,eACA,eACA,iBACA,iBACA,AACF,CAEO,MAAM,CAA6B,CAAE,CAAe,CAAE,CAA+B,CAAQ,CACnG,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,KAAK,CAAG,EAAK,KAAK,CACvB,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CACzB,IAAI,CAAC,KAAK,CAAG,EAEb,IAAI,CAAC,WAAW,GAChB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,QAAQ,EACd,CAEQ,UAAiB,CAExB,IAAI,CAAC,GAAG,CAAC,SAAS,GAClB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,SAAS,EAC1E,IAAI,CAAC,GAAG,CAAC,WAAW,CAAG,IAAI,CAAC,MAAM,CAClC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAG,IAAI,CAAC,SAAS,CACnC,IAAI,CAAC,GAAG,CAAC,MAAM,GAGf,IAAI,CAAC,GAAG,CAAC,SAAS,GAClB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,SAAS,EAC1E,IAAI,CAAC,GAAG,CAAC,WAAW,CAAG,IAAI,CAAC,MAAM,CAClC,IAAI,CAAC,GAAG,CAAC,MAAM,EAChB,CAEQ,aAAoB,CAC3B,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,SAAS,CAAC,gBAC7B,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,SAAS,CAAC,gBAC7B,IAAI,CAAC,QAAQ,CAAG,IAAI,CAAC,SAAS,CAAC,kBAC/B,IAAI,CAAC,QAAQ,CAAG,IAAI,CAAC,SAAS,CAAC,iBAChC,CAEQ,UAAiB,CACxB,IAAI,CAAC,CAAC,CAAG,IAAI,CAAC,KAAK,CAAG,EACtB,IAAI,CAAC,CAAC,CAAG,IAAI,CAAC,MAAM,CAAG,EAEvB,IAAI,CAAC,SAAS,CAAG,AAAoC,IAApC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,EAC/C,IAAI,CAAC,MAAM,CAAG,AAAoC,GAApC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,CACjD,CAEQ,YAAmB,CAC1B,IAAI,CAAC,WAAW,CAAG,IAAO,KAAK,EAAE,CACjC,IAAI,CAAC,SAAS,CAAG,IAAI,CAAC,WAAW,CAAI,EAAI,KAAK,EAAE,CAAG,IAAI,CAAC,QAAQ,CAAG,IACnE,IAAI,CAAC,WAAW,CAAG,IAAI,CAAC,SAAS,CACjC,IAAI,CAAC,SAAS,CAAG,IAAI,CAAC,WAAW,CAAI,EAAI,KAAK,EAAE,CAAG,IAAI,CAAC,QAAQ,CAAG,GACpE,CAEQ,IAAI,CAAW,CAAsB,QAG5C,AAFY,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAGnB,EAGT,CAEQ,UAAU,CAAW,CAAU,CACtC,OAAO,OAAO,IAAI,CAAC,GAAG,CAAC,GACxB,CAEQ,UAAU,CAAW,CAAU,CACtC,OAAO,OAAO,IAAI,CAAC,GAAG,CAAC,EAAI,CAAC,EAAE,EAAI,IAAI,CAAC,GAAG,CAAC,GAAK,KAAK,GAAK,CAC3D,CAED,CAWA,cAAc,OAAQ","sources":["<anon>","youtube-css-paint-api/ts/worklet-ring.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $f8b3cd360f0f0b52$exports = {};\n\n$parcel$export($f8b3cd360f0f0b52$exports, \"WorkletRing\", () => $f8b3cd360f0f0b52$export$51e25d7ce655b57);\nclass $f8b3cd360f0f0b52$export$51e25d7ce655b57 {\n    // static get contextOptions() {\n    // \treturn { alpha: true };\n    // }\n    /*\n\t use this function to retrieve any custom properties (or regular properties, such as 'height')\n\t defined for the element, return them in the specified array\n*/ static get inputProperties() {\n        return [\n            \"--colorRing1\",\n            \"--colorRing2\",\n            \"--percentRing1\",\n            \"--percentRing2\"\n        ];\n    }\n    paint(ctx, size, props) {\n        this.ctx = ctx;\n        this.width = size.width;\n        this.height = size.height;\n        this.props = props;\n        this.initCssVars();\n        this.calcSize();\n        this.calcAngles();\n        this.drawRing();\n    }\n    drawRing() {\n        // Рисуем первую часть кольца\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, this.radius, this.startAngle1, this.endAngle1);\n        this.ctx.strokeStyle = this.color1;\n        this.ctx.lineWidth = this.lineWidth;\n        this.ctx.stroke();\n        // Рисуем вторую часть кольца\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, this.radius, this.startAngle2, this.endAngle2);\n        this.ctx.strokeStyle = this.color2;\n        this.ctx.stroke();\n    }\n    initCssVars() {\n        this.color1 = this.getString(\"--colorRing1\");\n        this.color2 = this.getString(\"--colorRing2\");\n        this.percent1 = this.getNumber(\"--percentRing1\");\n        this.percent2 = this.getNumber(\"--percentRing2\");\n    }\n    calcSize() {\n        this.x = this.width / 2;\n        this.y = this.height / 2;\n        this.lineWidth = Math.min(this.width, this.height) * 0.15;\n        this.radius = Math.min(this.width, this.height) * 0.3;\n    }\n    calcAngles() {\n        this.startAngle1 = -0.5 * Math.PI; // начальный угол для первой части (12 часов)\n        this.endAngle1 = this.startAngle1 + 2 * Math.PI * this.percent1 / 100; // конечный угол для первой части\n        this.startAngle2 = this.endAngle1; // начальный угол для второй части (заканчивается там, где закончилась первая)\n        this.endAngle2 = this.startAngle2 + 2 * Math.PI * this.percent2 / 100; // конечный угол для второй части\n    }\n    get(key) {\n        const val = this.props.get(key);\n        if (!val) return \"\";\n        return val;\n    }\n    getString(key) {\n        return String(this.get(key));\n    }\n    getNumber(key) {\n        return Number(this.get(key)[0] || this.get(key).value) || 0;\n    }\n}\nregisterPaint(\"ring\", $f8b3cd360f0f0b52$export$51e25d7ce655b57);\n\n\n//# sourceMappingURL=worklet-ring.c04e4535.js.map\n","interface PaintSize {\n\twidth: number;\n\theight: number;\n}\n\nexport class WorkletRing {\n\n\tprivate ctx: CanvasRenderingContext2D;\n\tprivate props: StylePropertyMapReadOnly;\n\n\tprivate color1: string;\n\tprivate color2: string;\n\tprivate percent1: number;\n\tprivate percent2: number;\n\tprivate startAngle1: number;\n\tprivate endAngle1: number;\n\tprivate startAngle2: number;\n\tprivate endAngle2: number;\n\tprivate width: number;\n\tprivate height: number;\n\tprivate x: number;\n\tprivate y: number;\n\tprivate lineWidth: number;\n\tprivate radius: number;\n\n\t// static get contextOptions() {\n\t// \treturn { alpha: true };\n\t// }\n\n\t/*\n\t use this function to retrieve any custom properties (or regular properties, such as 'height')\n\t defined for the element, return them in the specified array\n*/\n\n\tstatic get inputProperties(): string[] {\n\t\treturn [\n\t\t\t'--colorRing1',\n\t\t\t'--colorRing2',\n\t\t\t'--percentRing1',\n\t\t\t'--percentRing2',\n\t\t];\n\t}\n\n\tpublic paint(ctx: CanvasRenderingContext2D, size: PaintSize, props: StylePropertyMapReadOnly): void {\n\t\tthis.ctx = ctx;\n\t\tthis.width = size.width;\n\t\tthis.height = size.height;\n\t\tthis.props = props;\n\n\t\tthis.initCssVars();\n\t\tthis.calcSize();\n\t\tthis.calcAngles();\n\t\tthis.drawRing();\n\t}\n\n\tprivate drawRing(): void {\n\t\t// Рисуем первую часть кольца\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.arc(this.x, this.y, this.radius, this.startAngle1, this.endAngle1);\n\t\tthis.ctx.strokeStyle = this.color1;\n\t\tthis.ctx.lineWidth = this.lineWidth;\n\t\tthis.ctx.stroke();\n\n\t\t// Рисуем вторую часть кольца\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.arc(this.x, this.y, this.radius, this.startAngle2, this.endAngle2);\n\t\tthis.ctx.strokeStyle = this.color2;\n\t\tthis.ctx.stroke();\n\t}\n\n\tprivate initCssVars(): void {\n\t\tthis.color1 = this.getString('--colorRing1');\n\t\tthis.color2 = this.getString('--colorRing2');\n\t\tthis.percent1 = this.getNumber('--percentRing1');\n\t\tthis.percent2 = this.getNumber('--percentRing2');\n\t}\n\n\tprivate calcSize(): void {\n\t\tthis.x = this.width / 2;\n\t\tthis.y = this.height / 2;\n\n\t\tthis.lineWidth = Math.min(this.width, this.height) * 0.15;\n    this.radius = Math.min(this.width, this.height) * 0.3;\n\t}\n\n\tprivate calcAngles(): void {\n\t\tthis.startAngle1 = -0.5 * Math.PI; // начальный угол для первой части (12 часов)\n\t\tthis.endAngle1 = this.startAngle1 + (2 * Math.PI * this.percent1 / 100); // конечный угол для первой части\n\t\tthis.startAngle2 = this.endAngle1; // начальный угол для второй части (заканчивается там, где закончилась первая)\n\t\tthis.endAngle2 = this.startAngle2 + (2 * Math.PI * this.percent2 / 100); // конечный угол для второй части\n\t}\n\n\tprivate get(key: string): CSSStyleValue | \"\" {\n\t\tconst val = this.props.get(key);\n\n\t\tif (!val) {\n\t\t\treturn '';\n\t\t}\n\t\treturn val;\n\t}\n\n\tprivate getString(key: string): string {\n\t\treturn String(this.get(key));\n\t}\n\n\tprivate getNumber(key: string): number {\n\t\treturn Number(this.get(key)[0] || this.get(key).value) || 0;\n\t}\n\n}\n\n\n\ntype ClassName<T = any, Arguments extends unknown[] = any[]> = {\n\tprototype: T;\n\tnew(...arguments_: Arguments): T;\n};\n\ndeclare function registerPaint(param1: string, param2: ClassName): void;\n\nregisterPaint(\"ring\", WorkletRing);\n"],"names":["Object","defineProperty","get","$f8b3cd360f0f0b52$export$51e25d7ce655b57","set","s","enumerable","configurable","inputProperties","paint","ctx","size","props","width","height","initCssVars","calcSize","calcAngles","drawRing","beginPath","arc","x","y","radius","startAngle1","endAngle1","strokeStyle","color1","lineWidth","stroke","startAngle2","endAngle2","color2","getString","percent1","getNumber","percent2","Math","min","PI","key","String","Number","value","registerPaint"],"version":3,"file":"worklet-ring.c04e4535.js.map"}